rm(list=ls())
library(ggplot2)#
library(RColorBrewer)#
library(deSolve)#
#
peaks = matrix(c(-0.2,-0.4,1.4,1),nrow=2,byrow=TRUE)#
#
trait1 = seq(-2,2,by=0.1)#
trait2 = seq(-2,2,by=0.1)#
combos = expand.grid(trait1,trait2)#
colnames(combos)=c('tr1','tr2')#
Ncombos = dim(combos)[1]#
#
heights = c(1,1.5)#
steepnesses = c(0.05,0.1)#
#
global_fitness <-function(traits){#
	differences = t(apply(peaks,1,function(v){v-traits}))#
	distances = apply(differences,1,norm,type='2')#
	g = sum(heights*exp(-distances^2/steepnesses))#
	return(g)#
}#
#
landscape = data.frame(x=combos$tr1,y=combos$tr2,fitness=apply(combos,1,global_fitness))#
#
ylorrd = brewer.pal(9,'YlOrRd')#
ylorrd = colorRampPalette(ylorrd)(20)#
#
image(trait1,trait2,matrix(landscape$fitness,nrow=length(trait1)),col=ylorrd)#
#
init_mean = c(0,1)#
init_var = 0.1#
#
init_freq <-function(traits){#
	distance = norm(traits-init_mean,type='2')#
	p = exp(-distance^2/init_var)#
	return(p)#
}#
#
init_df= data.frame(x=combos$tr1,y=combos$tr2,freq=apply(combos,1,init_freq))#
init_df$freq = init_df$freq + 0.0001#
init_df$freq = init_df$freq / sum(init_df$freq)#
#
image(trait1,trait2,matrix(init_df$freq,nrow=length(trait1)),col=ylorrd)#
#
local_fitness <-function(x){#
	negative_freq_dep = matrix(rep(1,Ncombos),nrow=length(trait1))#
	diag(negative_freq_dep)=-1#
	l = negative_freq_dep%*%x#
	return(l)#
}#
#
dynamics <- function(t,x,parms){#
	fitness=apply(combos,1,global_fitness)#
	mean_fitness = sum(fitness*x)#
	# change = x*(fitness-mean_fitness)#
	return(list(x*(fitness-mean_fitness)))#
}#
#
times = seq(0,20,by=1)
local_fitness <-function(x){#
	negative_freq_dep = matrix(rep(1,Ncombos),nrow=length(trait1))#
	diag(negative_freq_dep)=-1#
	l = negative_freq_dep%*%x#
	return(l)#
}
local_fitness <-function(x){#
	negative_freq_dep = matrix(rep(1,Ncombos),nrow=length(trait1))#
	diag(negative_freq_dep)=-1#
	l = negative_freq_dep%*%matrix(x,ncol=1)#
	return(l)#
}
str(init_df$freq)
negative_freq_dep = matrix(rep(1,Ncombos),nrow=length(trait1))#
	diag(negative_freq_dep)=-1
dim(negative_freq_dep)
Ncombos
41*41
local_fitness <-function(x){#
	negative_freq_dep = matrix(rep(1,Ncombos^2),nrow=Ncombos)#
	diag(negative_freq_dep)=-1#
	l = negative_freq_dep%*%matrix(x,ncol=1)#
	return(l)#
}
l = local_fitness(init_df$freq)
image(trait1,trait2,matrix(l,nrow=length(trait1)),col=ylorrd)
image(trait1,trait2,matrix(g.fitness,nrow=length(trait1)),col=ylorrd)
library(ggplot2)#
library(RColorBrewer)#
library(deSolve)#
#
peaks = matrix(c(-0.2,-0.4,1.4,1),nrow=2,byrow=TRUE)#
#
trait1 = seq(-2,2,by=0.1)#
trait2 = seq(-2,2,by=0.1)#
combos = expand.grid(trait1,trait2)#
colnames(combos)=c('tr1','tr2')#
Ncombos = dim(combos)[1]#
#
heights = c(1,1.5)#
steepnesses = c(0.05,0.1)#
#
global_fitness <-function(traits){#
	differences = t(apply(peaks,1,function(v){v-traits}))#
	distances = apply(differences,1,norm,type='2')#
	g = sum(heights*exp(-distances^2/steepnesses))#
	return(g)#
}#
#
landscape = data.frame(x=combos$tr1,y=combos$tr2,fitness=apply(combos,1,global_fitness))#
#
ylorrd = brewer.pal(9,'YlOrRd')#
ylorrd = colorRampPalette(ylorrd)(20)#
#
image(trait1,trait2,matrix(landscape$fitness,nrow=length(trait1)),col=ylorrd)#
#
init_mean = c(0,1)#
init_var = 0.1#
#
init_freq <-function(traits){#
	distance = norm(traits-init_mean,type='2')#
	p = exp(-distance^2/init_var)#
	return(p)#
}#
#
init_df= data.frame(x=combos$tr1,y=combos$tr2,freq=apply(combos,1,init_freq))#
init_df$freq = init_df$freq + 0.0001#
init_df$freq = init_df$freq / sum(init_df$freq)#
#
image(trait1,trait2,matrix(init_df$freq,nrow=length(trait1)),col=ylorrd)#
#
local_fitness <-function(x){#
	negative_freq_dep = matrix(rep(1,Ncombos^2),nrow=Ncombos)#
	diag(negative_freq_dep)=-1#
	l = negative_freq_dep%*%matrix(x,ncol=1)#
	return(l)#
}#
#
dynamics <- function(t,x,competition=F){#
	g.fitness = apply(combos,1,global_fitness)#
	l.fitness = local_fitness(x)#
	if(competition==T){#
		fitness = g.fitness + l.fitness#
	}else{#
		fitness = g.fitness#
		}#
	mean_fitness = sum(fitness*x)#
	return(list(x*(fitness-mean_fitness)))#
}#
#
times = seq(0,20,by=1)
?ode
trajec_wo_comp = ode(y = init_df$freq, times = times, func = dynamics,parms=c(competition=F))
dynamics <- function(t,x,competition=F){#
	g.fitness = apply(combos,1,global_fitness)#
	if(competition==T){#
		l.fitness = local_fitness(x)#
		fitness = g.fitness + l.fitness#
	}else{#
		fitness = g.fitness#
		}#
	mean_fitness = sum(fitness*x)#
	return(list(x*(fitness-mean_fitness)))#
}
trajec_w_comp = ode(y = init_df$freq, times = times, func = dynamics,parms=c(competition=T))
plot(trajec_wo_comp[,1266])
points(trajec_w_comp[,1266],col='red')
init_mean = c(0,1)#
init_var = 0.01#
#
init_freq <-function(traits){#
	distance = norm(traits-init_mean,type='2')#
	p = exp(-distance^2/init_var)#
	return(p)#
}#
#
init_df= data.frame(x=combos$tr1,y=combos$tr2,freq=apply(combos,1,init_freq))#
init_df$freq = init_df$freq + 0.0001#
init_df$freq = init_df$freq / sum(init_df$freq)#
#
image(trait1,trait2,matrix(init_df$freq,nrow=length(trait1)),col=ylorrd)
init_mean = c(0,1)#
init_var = 0.01#
#
init_freq <-function(traits){#
	distance = norm(traits-init_mean,type='2')#
	p = exp(-distance^2/init_var)#
	return(p)#
}#
#
init_df= data.frame(x=combos$tr1,y=combos$tr2,freq=apply(combos,1,init_freq))#
init_df$freq = init_df$freq + 0.0001#
init_df$freq = init_df$freq / sum(init_df$freq)#
#
image(trait1,trait2,matrix(init_df$freq,nrow=length(trait1)),col=ylorrd)#
#
local_fitness <-function(x){#
	negative_freq_dep = matrix(rep(1,Ncombos^2),nrow=Ncombos)#
	diag(negative_freq_dep)=-1#
	l = negative_freq_dep%*%matrix(x,ncol=1)#
	return(l)#
}#
#
dynamics <- function(t,x,competition=F){#
	g.fitness = apply(combos,1,global_fitness)#
	if(competition==T){#
		l.fitness = local_fitness(x)#
		fitness = g.fitness + l.fitness#
	}else{#
		fitness = g.fitness#
		}#
	mean_fitness = sum(fitness*x)#
	return(list(x*(fitness-mean_fitness)))#
}#
#
times = seq(0,20,by=1)#
#
trajec_wo_comp = ode(y = init_df$freq, times = times, func = dynamics,parms=c(competition=F))#
trajec_w_comp = ode(y = init_df$freq, times = times, func = dynamics,parms=c(competition=T))
plot(trajec_wo_comp[,1266]);points(trajec_w_comp[,1266],col='red')
trajec_w_comp[1:10,1:10]
mean_fitness_wo_comp = apply(trajec_wo_comp[,2:(NCombos^2)],2,function(v){sum(v*g.fitness)})
mean_fitness_wo_comp = apply(trajec_wo_comp[,2:(Ncombos^2)],2,function(v){sum(v*g.fitness)})
dim(trajec_wo_comp)
Ncombos^2
mean_fitness_wo_comp = apply(trajec_wo_comp[,2:(NCombos)],2,function(v){sum(v*g.fitness)})
mean_fitness_wo_comp = apply(trajec_wo_comp[,2:(Ncombos)],2,function(v){sum(v*g.fitness)})
length(trajec_wo_comp[,2])
mean_fitness_wo_comp = apply(trajec_wo_comp[,2:(Ncombos)],1,function(v){sum(v*g.fitness)})
legnth(trajec_wo_comp[1,2:1682])
length(trajec_wo_comp[1,2:1682])
length(g.fitness)
sum(trajec_wo_comp[1,2:1682]*g.fitness)
mean_fitness_wo_comp = apply(trajec_wo_comp[,2:(Ncombos+1)],1,function(v){sum(v*g.fitness)})
mean_fitness_w_comp = apply(trajec_w_comp[,2:(Ncombos+1)],1,function(v){sum(v*g.fitness)})
plot(mean_fitness_wo_comp)
points(mean_fitness_w_comp,col='red')
plot(mean_fitness_wo_comp,t='o')
points(mean_fitness_w_comp,col='red',t='o')
image(trait1,trait2,matrix(landscape$fitness,nrow=length(trait1)),col=ylorrd)
source("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file825168428369")#
unlink("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file825168428369")
mean_fitness_wo_comp = apply(trajec_wo_comp[,2:(Ncombos+1)],1,function(v){sum(v*g.fitness)})#
mean_fitness_w_comp = apply(trajec_w_comp[,2:(Ncombos+1)],1,function(v){sum(v*g.fitness)})
t=t_1;image(trait1,trait2,matrix(trajec_w_comp[t,2:1682],nrow=length(trait1)),col=ylorrd)
t=t+1;image(trait1,trait2,matrix(trajec_w_comp[t,2:1682],nrow=length(trait1)),col=ylorrd)
source("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file82512d32bd3a")#
unlink("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file82512d32bd3a")
x=trajec_w_comp[21,2:(Ncombos+1)]
length(x)
l.fitness = local_fitness(x)
sum(l.fitness)
sum(l.fitness*x)
sum(g.fitness*x)
sum(g.fitness)
plot(mean_fitness_wo_comp,t='o',pch=19);points(mean_fitness_w_comp,col='red',t='o',pch=19)
t=t+5;image(trait1,trait2,matrix(trajec_wo_comp[t,2:1682],nrow=length(trait1)),col=ylorrd)
t=1;image(trait1,trait2,matrix(trajec_w_comp[t,2:1682],nrow=length(trait1)),col=ylorrd)
t=t+5;image(trait1,trait2,matrix(trajec_w_comp[t,2:1682],nrow=length(trait1)),col=ylorrd)
?norm
x=c(1,5)
norm(x,type='O')
norm(x,type='2')
norm(x,type='I')
norm(x,type='F')
sqrt(sum(1+25))
norm(x,type='M')
combos[1:10,]
trait_step = 0.1
j = 25
i=25
j = setunion(which(abs(combos$tr1-combos$tr1[i])==trait_step),which(abs(combos$tr2-combos$tr2[i])==trait_step))
union()
j = union(which(abs(combos$tr1-combos$tr1[i])==trait_step),which(abs(combos$tr2-combos$tr2[i])==trait_step))
combos[i+(-5:5),]
i
combos$tr1[25]
combos$tr1[24]
combos$tr1[25]-combos$tr1[24]==0.1
combos$tr1[25]-combos$tr1[24]
(combos$tr1[25]-combos$tr1[24])==0.1
round(combos$tr1[25]-combos$tr1[24],1)==0.1
j = union(which(round(abs(combos$tr1-combos$tr1[i]),1)==trait_step),which(round(abs(combos$tr2-combos$tr2[i]),1)==trait_step)) ###careful with rounding if trait_step is not 0.1
i = 250
j = union(intersect(which(round(abs(combos$tr1-combos$tr1[i]),1)==trait_step),which(round(abs(combos$tr2-combos$tr2[i]),1)==0)),intersect(which(round(abs(combos$tr1-combos$tr1[i]),1)==0),which(round(abs(combos$tr2-combos$tr2[i]),1)==trait_step))) ###careful with rounding if trait_step is not 0.1
combos[j,]
j=empty()
j=find(1:10==11)
j=which(1:10==11)
mut_rate=0.05
length(j)*mut_rate
mut_rate = 0.05#
mut_mat = matrix(rep(0,Ncombos^2),nrow=Ncombos)#
for(j in 1:Ncombos){#
	i = union(intersect(which(round(abs(combos$tr1-combos$tr1[i]),1)==trait_step),which(round(abs(combos$tr2-combos$tr2[i]),1)==0)),intersect(which(round(abs(combos$tr1-combos$tr1[i]),1)==0),which(round(abs(combos$tr2-combos$tr2[i]),1)==trait_step))) ###careful with rounding if trait_step is not 0.1#
	mut_mat[i,j] = mut_rate#
	mut_mat[j,j] = 1-length(i)*mut_rate#
}
warnings()
mut_rate = 0.05#
mut_mat = matrix(rep(0,Ncombos^2),nrow=Ncombos)#
for(j in 1:Ncombos){#
	i = union(intersect(which(round(abs(combos$tr1-combos$tr1[j]),1)==trait_step),which(round(abs(combos$tr2-combos$tr2[j]),1)==0)),intersect(which(round(abs(combos$tr1-combos$tr1[j]),1)==0),which(round(abs(combos$tr2-combos$tr2[j]),1)==trait_step))) ###careful with rounding if trait_step is not 0.1#
	mut_mat[i,j] = mut_rate#
	mut_mat[j,j] = 1-length(i)*mut_rate#
}
v=apply(mut_mat,1,sum)
v=apply(mut_mat,2,sum)
range(v)
sum(mut_mat[1,])
sum(mut_mat[,1])
which(mut_mat[,1]!=0)
which(mut_mat[1,]!=0)
combos[1,]
j=1
i = union(intersect(which(round(abs(combos$tr1-combos$tr1[j]),1)==trait_step),which(round(abs(combos$tr2-combos$tr2[j]),1)==0)),intersect(which(round(abs(combos$tr1-combos$tr1[j]),1)==0),which(round(abs(combos$tr2-combos$tr2[j]),1)==trait_step))) ###careful with rounding if trait_step is not 0.1
combos[i,]
intersect(which(combos$tr1==-1.9),which(combos$tr2==-1.9))
library(ggplot2)#
library(RColorBrewer)#
library(deSolve)#
#
peaks = matrix(c(-0.2,-0.4,1.4,1),nrow=2,byrow=TRUE)#
#
trait_step = 0.1#
trait1 = seq(-2,2,by=trait_step)#
trait2 = seq(-2,2,by=trait_step)#
combos = expand.grid(trait1,trait2)#
colnames(combos)=c('tr1','tr2')#
Ncombos = dim(combos)[1]#
#
heights = c(1,1.5)#
steepnesses = c(0.03,0.05)#
#
global_fitness <-function(traits){#
	differences = t(apply(peaks,1,function(v){v-traits}))#
	distances = apply(differences,1,norm,type='2')#
	g = sum(heights*exp(-distances^2/steepnesses))#
	return(g)#
}#
#
landscape = data.frame(x=combos$tr1,y=combos$tr2,fitness=apply(combos,1,global_fitness))#
#
ylorrd = brewer.pal(9,'YlOrRd')#
ylorrd = colorRampPalette(ylorrd)(20)#
#
image(trait1,trait2,matrix(landscape$fitness,nrow=length(trait1)),col=ylorrd)#
#
init_mean = c(-0.4,-0.4)#
init_var = 0.01#
#
init_freq <-function(traits){#
	distance = norm(traits-init_mean,type='2')#
	p = exp(-distance^2/init_var)#
	return(p)#
}#
#
init_df= data.frame(x=combos$tr1,y=combos$tr2,freq=apply(combos,1,init_freq))#
# init_df$freq = init_df$freq + 0.0001#
init_df$freq = init_df$freq / sum(init_df$freq)#
#
image(trait1,trait2,matrix(init_df$freq,nrow=length(trait1)),col=ylorrd)#
#
local_fitness <-function(x){#
	negative_freq_dep = matrix(rep(1,Ncombos^2),nrow=Ncombos)#
	diag(negative_freq_dep)=-1#
	l = negative_freq_dep%*%matrix(x,ncol=1)#
	return(l)#
}#
#
mut_rate = 0.05#
mut_mat = matrix(rep(0,Ncombos^2),nrow=Ncombos)#
for(j in 1:Ncombos){#
	i = union(intersect(which(round(abs(combos$tr1-combos$tr1[j]),1)==trait_step),which(round(abs(combos$tr2-combos$tr2[j]),1)==0)),intersect(which(round(abs(combos$tr1-combos$tr1[j]),1)==0),which(round(abs(combos$tr2-combos$tr2[j]),1)==trait_step))) ###careful with rounding if trait_step is not 0.1#
	mut_mat[i,j] = mut_rate #mutation from j to i#
	mut_mat[j,j] = 1-length(i)*mut_rate#
}#
#
g.fitness = apply(combos,1,global_fitness)#
dynamics <- function(t,x,competition=F){#
	if(competition==T){#
		l.fitness = local_fitness(x)#
		fitness = g.fitness + l.fitness#
	}else{#
		fitness = g.fitness#
		}#
	mean_fitness = sum(fitness*x)#
	return(list(mut_mat%*%(x*fitness)-x*mean_fitness)))#
}
return(list(mut_mat%*%(x*fitness)-x*mean_fitness))
dynamics <- function(t,x,competition=F){#
	if(competition==T){#
		l.fitness = local_fitness(x)#
		fitness = g.fitness + l.fitness#
	}else{#
		fitness = g.fitness#
		}#
	mean_fitness = sum(fitness*x)#
	return(list(mut_mat%*%(x*fitness)-x*mean_fitness))#
}
apply(trajec_wo_comp[,2:Ncombos],1,sum)
apply(trajec_w_comp[,2:Ncombos],1,sum)
source("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file825159331927")#
unlink("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file825159331927")
points(-0.2,-0.4,pch=19)
t=1;image(trait1,trait2,matrix(trajec_wo_comp[t,2:1682],nrow=length(trait1)),col=ylorrd)
t=t+1;image(trait1,trait2,matrix(trajec_wo_comp[t,2:1682],nrow=length(trait1)),col=ylorrd)
t=t+1;image(trait1,trait2,matrix(trajec_wo_comp[t,2:1682],nrow=length(trait1)),col=ylorrd);points(peaks[1,1],peaks[1,2],pch=19);points(peaks[2,1],peaks[2,2],pch=19)
source("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file825142c4bbc9")#
unlink("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file825142c4bbc9")
plot(mean_fitness_wo_comp,pch=19,t='o');points(mean_fitness_w_comp,pch=19,t='o',col='red')
t=t+5;image(trait1,trait2,matrix(trajec_w_comp[t,2:1682],nrow=length(trait1)),col=ylorrd);points(peaks[1,1],peaks[1,2],pch=19);points(peaks[2,1],peaks[2,2],pch=19)
intersect(which(combos$tr1==0.2),which(combos$tr2==0))
intersect(which(round(combos$tr1,1)==0.2),which(round(combos$tr2,2)==0))
plot(trajec_wo_comp[,844])
source("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file82512de91caf")#
unlink("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file82512de91caf")
source("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file82517947a134")#
unlink("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file82517947a134")
source("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file82515d6562a")#
unlink("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file82515d6562a")
source("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file82517396b7b")#
unlink("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file82517396b7b")
t=1;image(trait1,trait2,matrix(trajec_w_comp[t,2:1682],nrow=length(trait1)),col=ylorrd);points(peaks[1,1],peaks[1,2],pch=19);points(peaks[2,1],peaks[2,2],pch=19)
v=mut_mat%*%(x*fitness)-x*mean_fitness
length(which(x>0))
init_df[1]
init_df$freq[1]
t=t+1;image(trait1,trait2,matrix(trajec_w_comp[t,2:1682],nrow=length(trait1)),col=ylorrd);points(peaks[1,1],peaks[1,2],pch=19);points(peaks[2,1],peaks[2,2],pch=19)
source("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file82513916b310")#
unlink("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file82513916b310")
source("/Users/eleanorbrush/Documents/research/conflict_in_evolutionary_dynamics/pilot.R")
source("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file82516722ddbe")#
unlink("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file82516722ddbe")
source("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file82511a16ec25")#
unlink("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file82511a16ec25")
source("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file8251194683b")#
unlink("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file8251194683b")
plot(mean_fitness_wo_comp,pch=19,t='o',xlim=c(0,10));points(mean_fitness_w_comp,pch=19,t='o',col='red')
source("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file825134de2874")#
unlink("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file825134de2874")
source("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file8251521a053c")#
unlink("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file8251521a053c")
source("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file825128ccb7ea")#
unlink("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file825128ccb7ea")
source("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file82516630a324")#
unlink("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file82516630a324")
source("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file8251400a55f6")#
unlink("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file8251400a55f6")
source("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file82511e06e603")#
unlink("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file82511e06e603")
source("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file8251107f4668")#
unlink("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file8251107f4668")
x=init_df$freq
g.fitness = apply(combos,1,global_fitness)
fitness = g.fitness
mean_fitness = sum(fitness*x)
d=mut_mat%*%(x*fitness)-x*mean_fitness
mean_distance_wo_comp = apply(trajec_wo_comp[,2:(Ncombos+1)],1,function(v){sum(v*combos$tr1)})
mean_distance_wo_comp = rbind(apply(trajec_wo_comp[,2:(Ncombos+1)],1,function(v){sum(v*combos$tr1)}),apply(trajec_wo_comp[,2:(Ncombos+1)],1,function(v){sum(v*combos$tr2)}))
str(mean_distance_wo_comp)
mean_distance_wo_comp = apply(rbind(apply(trajec_wo_comp[,2:(Ncombos+1)],1,function(v){sum(v*combos$tr1)}),apply(trajec_wo_comp[,2:(Ncombos+1)],1,function(v){sum(v*combos$tr2)})),2,function(v){sqrt(sum(v-peaks[2,])^2)}
)
mean_distance_wo_comp = apply(rbind(apply(trajec_wo_comp[,2:(Ncombos+1)],1,function(v){sum(v*combos$tr1)}),apply(trajec_wo_comp[,2:(Ncombos+1)],1,function(v){sum(v*combos$tr2)})),2,function(v){sqrt(sum(v-peaks[2,])^2)})
plot(mean_distance_wo_comp)
mean_distance_w_comp = apply(rbind(apply(trajec_w_comp[,2:(Ncombos+1)],1,function(v){sum(v*combos$tr1)}),apply(trajec_wo_comp[,2:(Ncombos+1)],1,function(v){sum(v*combos$tr2)})),2,function(v){sqrt(sum(v-peaks[2,])^2)})
plot(mean_fitness_wo_comp,pch=19,t='o',xlim=c(0,20));points(mean_fitness_w_comp,pch=19,t='o',col='red')
plot(mean_distance_wo_comp,pch=19,t='o',xlim=c(0,20));points(mean_distance_w_comp,pch=19,t='o',col='red')
image(trait1,trait2,matrix(landscape$fitness,nrow=length(trait1)),col=ylorrd)#
image(trait1,trait2,matrix(init_df$freq,nrow=length(trait1)),col=ylorrd)#
#
plot(mean_fitness_wo_comp,pch=19,t='o',xlim=c(0,20));points(mean_fitness_w_comp,pch=19,t='o',col='red')#
#
plot(mean_distance_wo_comp,pch=19,t='o',xlim=c(0,20));points(mean_distance_w_comp,pch=19,t='o',col='red')
image(trait1,trait2,matrix(landscape$fitness,nrow=length(trait1)),col=ylorrd,title='Global fitness')
plot(mean_fitness_wo_comp,pch=19,t='o',xlim=c(0,20));points(mean_fitness_w_comp,pch=19,t='o',col='red',xlab='Time')
image(trait1,trait2,matrix(landscape$fitness,nrow=length(trait1)),col=ylorrd,main='Global fitness')#
image(trait1,trait2,matrix(init_df$freq,nrow=length(trait1)),col=ylorrd,main='Initial distribution')#
#
plot(time,mean_fitness_wo_comp,pch=19,t='o',xlim=c(0,20));points(time,mean_fitness_w_comp,pch=19,t='o',col='red',xlab='Time',ylab='Average global fitness')#
#
plot(time,mean_distance_wo_comp,pch=19,t='o',xlim=c(0,20));points(time,mean_distance_w_comp,pch=19,t='o',col='red',xlab='Time',ylab='Distance from mean trait to best peak')
mean_fitness_wo_comp = apply(trajec_wo_comp[,2:(Ncombos+1)],1,function(v){sum(v*g.fitness)})#
mean_fitness_w_comp = apply(trajec_w_comp[,2:(Ncombos+1)],1,function(v){sum(v*g.fitness)})#
#
mean_distance_wo_comp = apply(rbind(apply(trajec_wo_comp[,2:(Ncombos+1)],1,function(v){sum(v*combos$tr1)}),apply(trajec_wo_comp[,2:(Ncombos+1)],1,function(v){sum(v*combos$tr2)})),2,function(v){sqrt(sum(v-peaks[2,])^2)})#
mean_distance_w_comp = apply(rbind(apply(trajec_w_comp[,2:(Ncombos+1)],1,function(v){sum(v*combos$tr1)}),apply(trajec_wo_comp[,2:(Ncombos+1)],1,function(v){sum(v*combos$tr2)})),2,function(v){sqrt(sum(v-peaks[2,])^2)})#
#
image(trait1,trait2,matrix(landscape$fitness,nrow=length(trait1)),col=ylorrd,main='Global fitness')#
image(trait1,trait2,matrix(init_df$freq,nrow=length(trait1)),col=ylorrd,main='Initial distribution')#
#
plot(time,mean_fitness_wo_comp,pch=19,t='o',xlim=c(0,20));points(time,mean_fitness_w_comp,pch=19,t='o',col='red',xlab='Time',ylab='Average global fitness')#
#
plot(time,mean_distance_wo_comp,pch=19,t='o',xlim=c(0,20));points(time,mean_distance_w_comp,pch=19,t='o',col='red',xlab='Time',ylab='Distance from mean trait to best peak')
image(trait1,trait2,matrix(landscape$fitness,nrow=length(trait1)),col=ylorrd,main='Global fitness')
plot(time,mean_fitness_wo_comp,pch=19,t='o',xlim=c(0,20));points(time,mean_fitness_w_comp,pch=19,t='o',col='red',xlab='Time',ylab='Average global fitness')
plot(time,mean_fitness_wo_comp,pch=19,t='o',xlim=c(0,20));points(time,mean_fitness_w_comp,pch=19,t='o',col='red')
plot(time,mean_fitness_wo_comp,pch=19,t='o',xlim=c(0,20))
image(trait1,trait2,matrix(landscape$fitness,nrow=length(trait1)),col=ylorrd,main='Global fitness')#
image(trait1,trait2,matrix(init_df$freq,nrow=length(trait1)),col=ylorrd,main='Initial distribution')#
#
plot(times,mean_fitness_wo_comp,pch=19,t='o',xlim=c(0,20),xlab='Time',ylab='Average global fitness');points(times,mean_fitness_w_comp,pch=19,t='o',col='red')#
#
plot(time,mean_distance_wo_comp,pch=19,t='o',xlim=c(0,20));points(time,mean_distance_w_comp,pch=19,t='o',col='red',xlab='Time',ylab='Distance from mean trait to best peak')
image(trait1,trait2,matrix(landscape$fitness,nrow=length(trait1)),col=ylorrd,main='Global fitness')#
image(trait1,trait2,matrix(init_df$freq,nrow=length(trait1)),col=ylorrd,main='Initial distribution')#
#
plot(times,mean_fitness_wo_comp,pch=19,t='o',xlim=c(0,20),xlab='Time',ylab='Average global fitness');points(times,mean_fitness_w_comp,pch=19,t='o',col='red')#
#
plot(times,mean_distance_wo_comp,pch=19,t='o',xlim=c(0,20),xlab='Time',ylab='Distance from mean trait to best peak');points(times,mean_distance_w_comp,pch=19,t='o',col='red')
image(trait1,trait2,matrix(init_df$freq,nrow=length(trait1)),col=ylorrd,main='Initial distribution')
points(peaks[1,1],peaks[1,2],pch=19)
points(peaks[2,1],peaks[2,2],pch=19)
peaks
source("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file825138cc7ef6")#
unlink("/var/folders/p2/r_63rs6s26q_rpllz6r0kh3h0000gn/T//RtmpALgoFy/file825138cc7ef6")
t=51;image(trait1,trait2,matrix(trajec_w_comp[t,2:1682],nrow=length(trait1)),col=ylorrd);points(peaks[1,1],peaks[1,2],pch=19);points(peaks[2,1],peaks[2,2],pch=19)
t=51;image(trait1,trait2,matrix(trajec_wo_comp[t,2:1682],nrow=length(trait1)),col=ylorrd);points(peaks[1,1],peaks[1,2],pch=19);points(peaks[2,1],peaks[2,2],pch=19)
library(lattice)#
library(pracma)#
library(ggplot2)#
library(grid)#
library(gridExtra)#
library(gtable)#
library(digest)#
library(RColorBrewer)#
setwd('/Users/eleanorbrush/Dropbox/evo_badgesVSrecognition/code_extended_model')#
source('get_legend.R')#
load('noise=0.1/all_parameters.Rdata')#
source('sub2ind.R')#
source('ind2sub.R')#
#
parameters_cat_to_plot = parameters_cat#
parameters_cat_to_plot$w[parameters_cat$w==Inf] = 3000#
#
parameters_rule_to_plot = parameters_rule#
parameters_rule_to_plot$w[parameters_rule$w==Inf] = 3000#
#
Tfights = fixed_parameters$Tfights#
down_sample = fixed_parameters$down_sample#
time = seq(1,fixed_parameters$Tfights,by=fixed_parameters$down_sample)#
xN_cat = length(unique(parameters_cat$N))#
xdelta_cat = length(unique(parameters_cat$delta))#
xl_cat = length(unique(parameters_cat$l))#
xw_cat = length(unique(parameters_cat$w))#
xrho_cat = length(unique(parameters_cat$rho))#
dim_cat = data.frame(N=xN_cat,rho=xrho_cat,w=xw_cat,delta=xdelta_cat,l=xl_cat)#
xN_rule = length(unique(parameters_rule$N))#
xdelta_rule = length(unique(parameters_rule$delta))#
xl_rule = length(unique(parameters_rule$l))#
xw_rule = length(unique(parameters_rule$w))#
xrho_rule = length(unique(parameters_rule$rho))#
dim_rule = data.frame(N=xN_rule,rho=xrho_rule,w=xw_rule,delta=xdelta_rule,l=xl_rule)#
#
find <- function(N=NA,rho=NA,w=NA,delta=NA,l=NA,c=NA,p=parameters_cat){#
	params = unlist(as.list(environment())[1:6])#
	provided = which(!is.na(params))#
	vec = 1:dim(p)[1]#
	for(i in provided){#
		now = names(params)[i]#
		vec = intersect(vec,which(p[[now]]==params[i]))#
	}#
	return(vec)#
}#
#
find_df <- function(params,p=parameters_cat){#
	to_return = NULL#
	for(j in 1:dim(params)[1]){	#
		provided = which(!is.na(params[j,]))#
		vec = 1:dim(p)[1]#
		for(i in provided){#
			now = names(params)[i]#
			vec = intersect(vec,which(p[[now]]==params[[now]][j]))#
		}#
	if(sum(dim(p)==dim(parameters_cat))==2){#
		if(sum(p==parameters_cat)==prod(dim(p)) && length(vec)<prod(dim_cat)/prod(dim_cat[provided])){#
			vec = c(vec,rep(NA,prod(dim_cat)/prod(dim_cat[provided])-length(vec)))#
		}#
	}#
	if(sum(dim(p)==dim(parameters_rule))==2){#
		if(sum(p==parameters_rule)==prod(dim(p)) && length(vec)<prod(dim_rule)/prod(dim_rule[provided])){#
			vec = c(vec,rep(NA,prod(dim_rule)/prod(dim_rule[provided])-length(vec)))#
		}#
	}#
	to_return = rbind(to_return,vec)#
	}#
	return(to_return)#
}#
#
myround <-function(x,digits){#
	round(x*10^digits)/10^digits#
}#
#
moving_average <- function(v,k=5,keep_end=TRUE){#
	v2 = array(NA,dim=c(length(v),1))#
	if(keep_end){#
		M = length(v)#
	}else{#
		M = length(v)-floor((k-1)/2)#
	}#
	for(i in 1:M){#
		v2[i] = mean(v[i+(max(-floor(k/2),0):min(floor((k-1)/2),length(v)))],na.rm=TRUE)#
	}#
	return(v2)#
}#
#
moving_var <- function(v,k=5,keep_end=TRUE){#
	v2 = array(NA,dim=c(length(v),1))#
	if(keep_end){#
		M = length(v)#
	}else{#
		M = length(v)-floor((k-1)/2)#
	}#
	for(i in 1:M){#
		v2[i] = var(v[i+(max(-floor(k/2),0):min(floor((k-1)/2),length(v)))],na.rm=TRUE)#
	}#
	return(v2)#
}#
#
find_changes <- function(s){#
	intersect(which(diff(s)!=0),intersect(which(c(diff(s)[2:(length(s)-1)],0)==0),which(c(0,diff(s)[1:(length(s)-2)])==0)))+1#
}#
#
find_changes_immediate <- function(s){#
	which(diff(s)!=0)+1#
}#
#
optimization<- function(w){	#
	cost_cat = apply(error_cat,2,function(v) 2*w*v+(1-w)*time/30001)#
	best_cat = array(NA,dim(parameters_cat)[1])#
	start = 3#
	start2 = 10#
	start3 = 20#
	noisy  = array(NA,dim(parameters_cat)[1])#
	for(i in 1:dim(parameters_cat)[1]){#
		d = c(rep(NA,start-1),diff(cost_cat[start:length(time),i]))#
		k = 70#
		d_avg = moving_average(d,k)#
		# d_var = moving_var(d,10)#
		d_var = moving_var(error_cat[start:length(time),i],10)#
		max_var = max(d_var[start3:length(d_var)],na.rm=TRUE)#
		M = diff(range(error_cat[start2:length(time),i],na.rm=TRUE))#
		# if((diff(range(error_cat[start2:dim(cost_cat)[1],i],na.rm=TRUE)))>0.15){#
		if(M>0.075 && max_var<0.00006*M){#
			offset = 4#
			s = sign(myround(d_avg,4.2))#
			# }else if((diff(range(error_cat[start2:dim(cost_cat)[1],i],na.rm=TRUE)))>0.1){#
			noisy[i] = FALSE			#
			}else if((M>0.1 && max_var<0.0004*M && w<1) || max_var<0.00018*M){				#
			offset = 4#
			s = sign(myround(d_avg,3.3))#
			noisy[i] = TRUE			#
			}else{#
			offset = 8#
			s = sign(myround(d_avg,3.1))	#
			noisy[i] = TRUE#
			}#
		# if((noisy && !(parameters_cat$N[i]==25 && parameters_cat$w[i]>=2500)) || w==1){#
			s[s==0] = 1		#
		# }else{#
			# s[s==0] = -1#
		# }#
		z = apply(matrix(1:length(s),ncol=1),1,function(x) identical(s[(max(0,x-offset):min(length(s),x+offset))],rep(s[x],offset*2+1)))#
		if(length(s[z])>1){#
			f = which(z)[find_changes(s[z])]-offset#
		}else{#
			f = NULL#
		}	#
		if(length(f)==0 || length(f)>3){#
			if(sum(z)==0 || max(s[z],na.rm=TRUE)>(-1)){#
				best_cat[i] = start2#
			} else{#
				best_cat[i] = length(time)#
			}#
		}else {#
			if(max(s[f])==-1){#
				best_cat[i] = length(time)#
			}else{#
				best_cat[i] = min(f[which(s[f]>(-1))])#
			}#
		}#
	}#
	optimized_cat = apply(matrix(c(best_cat,1:dim(parameters_cat)[1]),nrow=2,byrow=TRUE),2,function(x) cost_cat[x[1],x[2]])#
	# best_cat[intersect(which(best_cat==start2),which(noisy))] = 1#
	cost_rule = apply(error_rule,2,function(v) 2*w*v+(1-w)*time/30001)#
	best_rule = array(NA,dim(parameters_rule)[1])#
	start = 3#
	start2 = 10#
	start3 = 20#
	for(i in 1:dim(parameters_rule)[1]){#
		d = c(rep(NA,start-1),diff(cost_rule[start:length(time),i]))#
		k = 5#
		d_avg = moving_average(d,k,keep_end=FALSE)[1:(length(d)-floor((k-1)/2))]	#
		d_var = moving_var(error_rule[start:length(time),i],10)	#
		offset = 5#
		s = sign(myround(d_avg,3))	#
		if(w<0.8){#
			offset = 6#
			s = sign(myround(d_avg,3.2))#
		}else if(max(d_var[start3:length(d_var)],na.rm=TRUE)<4e-05){				#
			offset = 6#
			s = sign(myround(d_avg,3.1)) ##changed from 3.1, which was changed from 3.15#
		}else{#
			offset = 10#
			s = sign(myround(d_avg,3))	#
		}#
		z = apply(matrix(1:length(s),ncol=1),1,function(x) identical(s[(max(0,x-offset):min(length(s),x+offset))],rep(s[x],offset*2+1)))#
		if(length(s[z])>1){#
			f = which(z)[find_changes_immediate(s[z])]-offset#
		}else{#
			f = NULL#
		}	#
		if(length(f)==0 || length(f)>3){#
			if(sum(z)==0 || max(s[z],na.rm=TRUE)>(-1)){#
				best_rule[i] = start2#
			} else{#
				best_rule[i] = length(time)#
			}#
		}else {#
			if(max(s[f])==-1){#
				best_rule[i] = length(time)#
			}else{#
				best_rule[i] = min(f[which(s[f]>(-1))])#
			}#
		}#
	}#
	optimized_rule = apply(matrix(c(best_rule,1:dim(parameters_rule)[1]),nrow=2,byrow=TRUE),2,function(x) cost_rule[x[1],x[2]])#
#
	# best_rule[best_rule==start2] = 1#
	return(list(best_cat=best_cat,optimized_cat=optimized_cat,best_rule=best_rule,optimized_rule=optimized_rule))#
}#
#
optimization_cat<- function(error,w){#
	if(length(error)>length(time)){#
	N = error[length(time)+1]#
	wind = error[length(time)+2]#
	error = error[1:length(time)]	#
	}else{#
		N = 25#
		wind = Inf#
	}#
	cost = 2*w*error+(1-w)*time/30001#
	start = 3#
	start2 = 10#
	start3 = 20#
	noisy  = NA#
	best_cat = NA#
#
	d = c(rep(NA,start-1),diff(cost[start:length(cost)]))#
	k = 70#
	d_avg = moving_average(d,k)#
	# d_var = moving_var(d,10)#
	d_var = moving_var(error[start:length(error)],10)#
	max_var = max(d_var[start3:length(d_var)],na.rm=TRUE)#
	M = diff(range(error[start2:length(error)],na.rm=TRUE))#
	# if((diff(range(error_cat[start2:dim(cost_cat)[1],i],na.rm=TRUE)))>0.15){#
	if(M>0.075 && max_var<0.00006*M){#
		offset = 4#
		s = sign(myround(d_avg,4.2))#
		# }else if((diff(range(error_cat[start2:dim(cost_cat)[1],i],na.rm=TRUE)))>0.1){#
		noisy = FALSE		#
		}else if((M>0.1 && max_var<0.0004*M && w<1) || max_var<0.00018*M){	###changed to 0.9 from 1		#
		offset = 4#
		s = sign(myround(d_avg,3.3))#
		noisy = TRUE		#
		}else{#
		offset = 8#
		s = sign(myround(d_avg,3.1))	#
		noisy = TRUE		#
		}#
	# if((noisy && !(N==25 && wind>=2500)) || w>=0.8){#
		s[s==0] = 1		#
	# }else{#
		# s[s==0] = -1#
	# }			#
	z = apply(matrix(1:length(s),ncol=1),1,function(x) identical(s[(max(0,x-offset):min(length(s),x+offset))],rep(s[x],offset*2+1)))#
	if(length(s[z])>1){#
		f = which(z)[find_changes(s[z])]-offset#
	}else{#
		f = NULL#
	}	#
	if(length(f)==0 || length(f)>3){#
		if(sum(z)==0 || max(s[z],na.rm=TRUE)>(-1)){#
			best_cat = start2#
		} else{#
			best_cat = length(error)#
		}#
	}else {#
		if(max(s[f])==-1){#
			best_cat = length(error)#
		}else{#
			best_cat = min(f[which(s[f]>(-1))])#
		}#
	}	#
	optimized_cat = cost[best_cat]#
	#if(best_cat==start2 && noisy){best_cat=1} #
	return(list(best_cat=best_cat,optimized_cat=optimized_cat))#
}	#
optimization_rule<- function(error,w){		#
	cost = 2*w*error+(1-w)*time/30001#
	start = 3#
	start2 = 10#
	start3 = 20#
	best_rule = NA#
	d = c(rep(NA,start-1),diff(cost[start:length(cost)]))#
	k = 5#
	d_avg = moving_average(d,k,keep_end=FALSE)[1:(length(d)-floor((k-1)/2))]	#
	d_var = moving_var(error[start:length(error)],10)	#
	offset = 5#
	s = sign(myround(d_avg,3))	#
	if(w<0.8){#
			offset = 6#
			s = sign(myround(d_avg,3.2))#
		}else if(max(d_var[start3:length(d_var)],na.rm=TRUE)<4e-05){				#
			offset = 6#
			s = sign(myround(d_avg,3.1)) ##changed from 3.1, which was changed from 3.15#
		}else{#
			offset = 10#
			s = sign(myround(d_avg,3))	#
		}#
	z = apply(matrix(1:length(s),ncol=1),1,function(x) identical(s[(max(0,x-offset):min(length(s),x+offset))],rep(s[x],offset*2+1)))#
	if(length(s[z])>1){#
		f = which(z)[find_changes_immediate(s[z])]-offset#
	}else{#
		f = NULL#
	}	#
	if(length(f)==0 || length(f)>3){#
		if(sum(z)==0 || max(s[z],na.rm=TRUE)>(-1)){#
			best_rule = start2#
		} else{#
			best_rule = length(time)#
		}#
	}else {#
		if(max(s[f])==-1){#
			best_rule = length(time)#
		}else{#
			best_rule = min(f[which(s[f]>(-1))])#
		}#
	}#
	optimized_rule = cost[best_rule]#
#
	# best_rule[best_rule==start2] = 1#
	return(list(best_rule=best_rule,optimized_rule=optimized_rule))#
}#
#
####### plotting parameters#
fontfamily = 'Helvetica'#
smallfontsize = 10#
largefontsize = 12#
#
lwd=2#
squish = log#
# unsquish = function(x){x^2}#
unsquish = exp#
#
#### palettes #
#
set1cols=brewer.pal(5,'Set1')#
# warm_pal = brewer.pal(8,'Spectral')[-5]#
red_pal = rev(brewer.pal(9,'Reds'))#
blue_pal = rev(brewer.pal(9,'Blues')[2:9])#
two_blues = brewer.pal(9,'Blues')[c(4,6)]#
div_pal = brewer.pal(11,'RdBu')#
red_blue_purp = c(brewer.pal(9,'Reds')[7],brewer.pal(9,'Blues')[c(4,6,7)],brewer.pal(9,'Greys')[5])#
purp_pal = brewer.pal(9,'Purples')[c(5,7,8)]#
green_pal = brewer.pal(9,'Greens')[c(3,5,7,8)]#
#### optimization over nearly all parameters#
examples_optimized = data.frame(N=rep(c(25,50,100),each=(xw_cat)*xrho_cat),rho=rep(rep(c(0.5,0.9,0.99),each=xw_cat),times=xN_cat),w=rep(c(250,500,1000,1500,2000,2500,Inf),times=xN_cat*xrho_cat))#
#
# w_vec = seq(0.5,1,by=0.1)#
# f_cat = as.vector(find_df(examples_optimized,p=parameters_cat))#
# f_rule = as.vector(find_df(examples_optimized,p=parameters_rule))#
#
# optimal_cognition_cat = data.frame(c=c(),N=c(),rho=c(),w=c(),delta=c(),l=c(),cost=c(),time=c(),error=c())#
# optimal_cognition_rule = data.frame(c=c(),N=c(),rho=c(),w=c(),delta=c(),l=c(),cost=c(),time=c(),error=c())#
#
# for(j in 1:length(w_vec)){#
	# w = w_vec[j]#
	# opt = apply(rbind(error_cat[,f_cat],parameters_cat$N[f_cat],parameters_cat$w[f_cat]),2,optimization_cat,w=w)#
	# optimized_cat = unlist(lapply(opt,function(x) x$optimized_cat))#
	# best_cat = unlist(lapply(opt,function(x) x$best_cat))#
	# opt = apply(error_rule[,f_rule],2,optimization_rule,w=w)#
	# optimized_rule = unlist(lapply(opt,function(x) x$optimized_rule))#
	# best_rule = unlist(lapply(opt,function(x) x$best_rule))#
	# for(i in 1:dim(examples_optimized)[1]){#
		# f = find(N=examples_optimized$N[i],rho=examples_optimized$rho[i],w=examples_optimized$w[i],p=parameters_cat[f_cat,])#
		# best = f[which.min(optimized_cat[f])]#
		# optimal_cognition_cat = rbind(optimal_cognition_cat,data.frame(c=w,N=examples_optimized$N[i],rho=examples_optimized$rho[i],w=examples_optimized$w[i],delta=parameters_cat$delta[f_cat[best]],l=parameters_cat$l[f_cat[best]],cost=optimized_cat[best],time=best_cat[best],error=error_cat[best_cat[best],f_cat[best]]))#
		# f = find(N=examples_optimized$N[i],rho=examples_optimized$rho[i],w=examples_optimized$w[i],p=parameters_rule[f_rule,])#
		# if(!isempty(f)){#
			# optimal_cognition_rule = rbind(optimal_cognition_rule,data.frame(c=w,N=examples_optimized$N[i],rho=examples_optimized$rho[i],w=examples_optimized$w[i],delta=0,l=0.05,cost=optimized_rule[f],time=best_rule[f],error=error_rule[best_rule[f],f_rule[f]]))#
		# }#
	# }#
# }#
#
# optimal_cognition_gen = data.frame(c=c(),N=c(),rho=c(),w=c(),delta=c(),l=c(),cost=c(),time=c(),error=c())#
#
# for(j in 1:length(w_vec)){#
	# w = w_vec[j]#
	# for(i in 1:dim(examples_optimized)[1]){		#
		# f = find(N=examples_optimized$N[i],rho=examples_optimized$rho[i],p=parameters_genetic)#
		# optimal_cognition_gen = rbind(optimal_cognition_gen,data.frame(c=w,N=examples_optimized$N[i],rho=examples_optimized$rho[i],w=examples_optimized$w[i],cost=w*2*error_genetic[1,f],time=1,error=error_genetic[1,f]))#
	# }#
# }#
#
# optimal_cognition_rule$w[which(optimal_cognition_rule$w==250)] = 0#
# optimal_cognition_cat$w[which(optimal_cognition_cat$w==250)] = 0#
# optimal_cognition_cat$w[which(optimal_cognition_cat$w==Inf)] = 3000#
# optimal_cognition_gen$w[which(optimal_cognition_gen$w==250)] = 0#
# optimal_cognition_gen$w[which(optimal_cognition_gen$w==Inf)] = 3000#
#
# optimal_cognition_rule_expanded = data.frame(c=c(),N=c(),rho=c(),w=c(),delta=c(),l=c(),cost=c(),time=c(),error=c())#
# hold = optimal_cognition_rule[find(w=2500,p=optimal_cognition_rule),]#
# hold$w = 3000#
# for(i in 1:length(hold$w)){#
	# optimal_cognition_rule_expanded = rbind(optimal_cognition_rule_expanded,optimal_cognition_rule[(1:6)+(i-1)*6,],hold[i,])#
# }#
# optimal_cognition_rule = optimal_cognition_rule_expanded#
# rm(optimal_cognition_rule_expanded)#
#
# # save(optimal_cognition_rule,optimal_cognition_cat,optimal_cognition_gen,file='optimal_cognition.Rdata')#
#
load('optimal_cognition.Rdata')#
w_vec = unique(optimal_cognition_cat$c)#
#
#### error and stopping time as a function of c#
#
examples = data.frame(N=c(50,25,25),rho=c(0.5,0.9,0.99),w=c(2500,2500,250),delta=c(0,0,0),l=c(0.25,0.25,0.25))#
examples = data.frame(N=c(25,25),rho=c(0.99,0.9),w=c(2500,2500),delta=c(0,0),l=c(0.5,0.5))#
examples_delta = examples#
examples_delta$delta = 0.25#
num_ex = dim(examples)[1]#
rule_relevant = intersect(which(names(examples)!='delta'),which(names(examples)!='l'))#
gen_relevant = rule_relevant[which(names(examples)[rule_relevant]!='w')]#
#
w_vec = seq(0,1,by=0.1)#
f_recog = as.vector(find_df(examples[1,],p=parameters_cat))#
f_cat = as.vector(find_df(examples_delta,p=parameters_cat))#
f_rule = as.vector(find_df(examples[,rule_relevant],p=parameters_rule))#
#
opt_c_recog = array(NA,length(w_vec))#
opt_c_cat = array(NA,dim=c(dim(examples)[1],length(w_vec)))#
opt_c_rule = array(NA,dim=c(dim(examples)[1],length(w_vec)))#
best_c_recog = array(NA,length(w_vec))#
best_c_cat = array(NA,dim=c(dim(examples)[1],length(w_vec)))#
best_c_rule = array(NA,dim=c(dim(examples)[1],length(w_vec)))#
#
for(j in 1:length(w_vec)){#
	w = w_vec[j]#
	opt = optimization_cat(c(error_cat[,f_recog],parameters_cat$N[f_recog],parameters_cat$w[f_recog]),w)#
	opt_c_recog[j] = error_cat[opt$best_cat,f_recog]#
	best_c_recog[j] = opt$best_cat#
	opt = apply(rbind(error_cat[,f_cat],parameters_cat$N[f_cat],parameters_cat$w[f_cat]),2,optimization_cat,w=w)#
	best_cat = unlist(lapply(opt,function(x) x$best_cat))#
	opt_c_cat[,j] = apply(matrix(1:length(f_cat),nrow=1),2,function(i){error_cat[best_cat[i],f_cat[i]]})#
	best_c_cat[,j] = best_cat#
	opt = apply(error_rule[,f_rule],2,optimization_rule,w=w)#
	best_rule = unlist(lapply(opt,function(x) x$best_rule))	#
	opt_c_rule[,j] = apply(matrix(1:length(f_rule),nrow=1),2,function(i){error_rule[best_rule[i],f_rule[i]]})#
	best_c_rule[,j] = best_rule#
}#
#### run optimization #
w=1#
# opt_no_time_costs = optimization(w)#
#
w=0.9#
# opt_small_time_costs = optimization(w)#
load('/Users/eleanorbrush/Desktop/code_extended_model/opt_data.Rdata')#
#
best_cat = opt_no_time_costs$best_cat#
optimized_cat = opt_no_time_costs$optimized_cat/2#
best_rule = opt_no_time_costs$best_rule#
optimized_rule = opt_no_time_costs$optimized_rule/2#
best_gen = rep(squish(10),dim(parameters_genetic)[1])#
optimized_gen = error_genetic[1,]
w=1#
# opt_no_time_costs = optimization(w)#
#
w=0.9#
# opt_small_time_costs = optimization(w)#
load('/Users/eleanorbrush/Dropbox/evo_badgesVSrecognition/code_extended_model/opt_data.Rdata')#
#
best_cat = opt_no_time_costs$best_cat#
optimized_cat = opt_no_time_costs$optimized_cat/2#
best_rule = opt_no_time_costs$best_rule#
optimized_rule = opt_no_time_costs$optimized_rule/2#
best_gen = rep(squish(10),dim(parameters_genetic)[1])#
optimized_gen = error_genetic[1,]
####optimized strategies#
#
marg = c(0.5,0.48,0.04,0.1)#
omarg = c(0.25,0.33,0.3,0.0)#
#
M_delta = c(0,0.25)#
#
contour_delta = list()#
#
for(i in 1:3){#
	for(j in 1:3){#
		I = sub2ind(c(xN_cat,xrho_cat),c(i,j))#
		f_cat_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_cat)#
		f_rule_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_rule)#
		delta_df = data.frame(w=optimal_cognition_cat$w[f_cat_now],c=optimal_cognition_cat$c[f_cat_now],delta=optimal_cognition_cat$delta[f_cat_now])		#
		contour_delta[[I]] = ggplot(delta_df,aes(x=c,y=w,z=delta)) +#
			geom_tile(aes(fill=delta))+#
			scale_fill_gradientn(colours=c(red_blue_purp[1],purp_pal[2]),limits=M_delta,guide='colorbar')+#
			theme_bw()+ theme(text=element_text(family="Helvetica", size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position='none')+#
			scale_y_continuous(expand = c(0,0),breaks=seq(000,3000,by=500),labels=c(250,seq(500,2500,by=500),'All')) + scale_x_continuous(expand = c(0,0),breaks=seq(0,1,by=0.25),limits=c(0.45,1.05))+#
			ylab('Memory window, w') + xlab('Cost of errors, c')#
	}#
}#
#
delta_fake = data.frame(z =cut(M_delta,breaks = 2), x = 1:2,y = 1:2)#
#
# delta_legend = ggplot(delta_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(red_pal),limits=M_delta,breaks = seq(0,M_delta[2],by=0.25), labels = seq(0,M_delta[2],by=0.25))+labs(fill='')+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
delta_legend = ggplot(delta_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=factor(z))) + scale_fill_manual(values=c(purp_pal[2],red_blue_purp[1]),labels=c(0.25,0))+labs(fill=expression(paste('Cat. width, ',delta,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
delta_legend = get_legend(delta_legend)#
#
graphics.off()#
#
M_l = c(0.05,0.5)#
#
contour_l = list()#
#
for(i in 1:3){#
	for(j in 1:3){#
		I = sub2ind(c(xN_cat,xrho_cat),c(i,j))#
		f_cat_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_cat)#
		f_rule_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_rule)#
		l_df = data.frame(w=optimal_cognition_cat$w[f_cat_now],c=optimal_cognition_cat$c[f_cat_now],l=cut(optimal_cognition_cat$l[f_cat_now],breaks=c(0.025,0.075,0.15,0.375,0.55)))		#
		contour_l[[I]] = ggplot(l_df,aes(x=c,y=w,z=l)) +#
			geom_tile(aes(fill=l))+#
			scale_fill_manual(values=green_pal,limits=levels(l_df$l))+#
			theme_bw()+ theme(text=element_text(family="Helvetica", size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position='none')+#
			scale_y_continuous(expand = c(0,0),breaks=seq(000,3000,by=500),labels=c(250,seq(500,2500,by=500),'All')) + scale_x_continuous(expand = c(0,0),breaks=seq(0,1,by=0.25),limits=c(0.45,1.05))+#
			ylab('Memory window, w') + xlab('Cost of errors, c')#
	}#
}#
#
l_fake = data.frame(z =cut(seq(M_l[1],M_l[2],length.out=4),breaks = 4), x = 1:4,y = 1:4)#
#
l_legend = ggplot(l_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=factor(z))) + scale_fill_manual(values=rev(green_pal),labels=rev(unique(parameters_cat$l)))+labs(fill='Rate, r')+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
l_legend = get_legend(l_legend)#
#
graphics.off()#
#
M_error = c(0,0.25)#
#
contour_error = list()#
#
for(i in 1:3){#
	for(j in 1:3){#
		I = sub2ind(c(xN_cat,xrho_cat),c(i,j))#
		f_cat_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_cat)#
		f_rule_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_rule)#
		error_df = data.frame(w=optimal_cognition_cat$w[f_cat_now],c=optimal_cognition_cat$c[f_cat_now],error=optimal_cognition_cat$error[f_cat_now])		#
		contour_error[[I]] = ggplot(error_df,aes(x=c,y=w,z=error)) +#
			geom_tile(aes(fill=error))+#
			scale_fill_gradientn(colours=rev(red_pal),limits=M_error,guide='colorbar')+#
			theme_bw()+ theme(text=element_text(family="Helvetica", size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position='none')+#
			scale_y_continuous(expand = c(0,0),breaks=seq(000,3000,by=500),labels=c(250,seq(500,2500,by=500),'All')) + scale_x_continuous(expand = c(0,0),breaks=seq(0,1,by=0.25),limits=c(0.45,1.05))+#
			ylab('Memory window, w') + xlab('Cost of errors, c')#
	}#
}#
#
error_fake = data.frame(z =seq(M_error[1],M_error[2],length.out = 22), x = 1:22,y = 1:22)#
#
error_legend = ggplot(error_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(red_pal),limits=M_error,breaks = seq(round(M_error[1],1),round(M_error[2],1),by=0.1), labels = seq(round(M_error[1],1),round(M_error[2],1),by=0.1))+labs(fill=expression(paste('Error, ',epsilon,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
error_legend = get_legend(error_legend)#
#
graphics.off()#
#
M_time = squish(time[c(10,601)])#
#
contour_time = list()#
#
for(i in 1:3){#
	for(j in 1:3){#
		I = sub2ind(c(xN_cat,xrho_cat),c(i,j))#
		f_cat_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_cat)#
		f_rule_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_rule)#
		time_df = data.frame(w=optimal_cognition_cat$w[f_cat_now],c=optimal_cognition_cat$c[f_cat_now],time=squish(time[optimal_cognition_cat$time[f_cat_now]]))		#
		contour_time[[I]] = ggplot(time_df,aes(x=c,y=w,z=time)) +#
			geom_tile(aes(fill=time))+#
			scale_fill_gradientn(colours=rev(blue_pal),limits=M_time,guide='colorbar')+#
			theme_bw()+ theme(text=element_text(family="Helvetica", size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position='none')+#
			scale_y_continuous(expand = c(0,0),breaks=seq(000,3000,by=500),labels=c(250,seq(500,2500,by=500),'All')) + scale_x_continuous(expand = c(0,0),breaks=seq(0,1,by=0.25),limits=c(0.45,1.05))+#
			ylab('Memory window, w') + xlab('Cost of errors, c')#
	}#
}#
#
time_fake = data.frame(z =seq(M_time[1],M_time[2],length.out = 22), x = 1:22,y = 1:22)#
#
time_legend = ggplot(time_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(blue_pal),limits=M_time,breaks = squish(c(1000,4000,16000)),labels=c(1000,4000,16000))+labs(fill=expression(paste('Time, ',tau,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), plot.title=element_text(size=smallfontsize),legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
time_legend = get_legend(time_legend)#
#
graphics.off()#
#
blank <- grid.rect(gp=gpar(col="white"))#
#
width = 6.85#
height= 6
time_legend = ggplot(time_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(blue_pal),limits=M_time,breaks = squish(c(1000,4000,16000)),labels=c(1000,4000,16000))+labs(fill=expression(paste('Time, ',tau,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), plot.title=element_text(size=smallfontsize),legend.key =element_blank(),legend.text=element_text(size=smallfontsize))
time_legend = ggplot(time_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(blue_pal),limits=M_time,breaks = squish(c(1000,4000,16000)),labels=c(1000,4000,16000))+labs(fill=expression(paste('Time, ',tau,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), ,legend.key =element_blank(),legend.text=element_text(size=smallfontsize))
time_legend = ggplot(time_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(blue_pal),limits=M_time,breaks = squish(c(1000,4000,16000)),labels=c(1000,4000,16000))+labs(fill=expression(paste('Time, ',tau,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"),legend.key =element_blank(),legend.text=element_text(size=smallfontsize))
grid.arrange(blank,contour_delta[[1]],contour_delta[[2]],contour_delta[[3]],delta_legend,blank,contour_delta[[4]],contour_delta[[5]],contour_delta[[6]],blank,blank,contour_delta[[7]],contour_delta[[8]],contour_delta[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))
grid.arrange(blank,contour_l[[1]],contour_l[[2]],contour_l[[3]],l_legend,blank,contour_l[[4]],contour_l[[5]],contour_l[[6]],blank,blank,contour_l[[7]],contour_l[[8]],contour_l[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))
grid.arrange(blank,contour_time[[1]],contour_time[[2]],contour_time[[3]],time_legend,blank,contour_time[[4]],contour_time[[5]],contour_time[[6]],blank,blank,contour_time[[7]],contour_time[[8]],contour_time[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))
grid.arrange(blank,contour_error[[1]],contour_error[[2]],contour_error[[3]],error_legend,blank,contour_error[[4]],contour_error[[5]],contour_error[[6]],blank,blank,contour_error[[7]],contour_error[[8]],contour_error[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))
width = 6.85#
height= 3#
#
marg = c(0.5,0.5,0.2,0.1)#
omarg = c(0.1,0.33,0.4,0.1)#
#
pdf('/Users/eleanorbrush/Desktop/stopping_time.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize,mai=marg,oma=omarg)#
#
layout(matrix(1:3,nrow=1))#
#
w_vals = c(1,0.9,0.6)#
#
f = find(N=25,rho=0.9,w=2500,delta=0,l=0.05)#
#
error = error_cat[,f]#
#
for(i in 1:3){#
	w = w_vals[i]#
	opt_now = optimization_cat(error,w)#
	cost = 2*w*error+(1-w)*time/30001#
	plot(time,cost,ylim=c(0,0.5),t='l',lwd=lwd,xlab='',ylab='',cex=largefontsize/smallfontsize,xaxt='n')#
	axis(1,seq(0,30000,by=10000))#
	title(paste('c = ',w,sep=''),cex=largefontsize/smallfontsize)#
	mtext('Time, t',side=1,line=2.3,cex=largefontsize/smallfontsize)#
	mtext('Total cost, C(t)',side=2,line=2.2,cex=largefontsize/smallfontsize)#
	points(time[opt_now$best_cat],opt_now$optimized_cat,col=red_blue_purp[1],lwd=lwd,pch=19)#
}#
#
dev.off()
?title
pdf('/Users/eleanorbrush/Desktop/stopping_time.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize,mai=marg,oma=omarg)#
#
layout(matrix(1:3,nrow=1))#
#
w_vals = c(1,0.9,0.6)#
#
f = find(N=25,rho=0.9,w=2500,delta=0,l=0.05)#
#
error = error_cat[,f]#
#
for(i in 1:3){#
	w = w_vals[i]#
	opt_now = optimization_cat(error,w)#
	cost = 2*w*error+(1-w)*time/30001#
	plot(time,cost,ylim=c(0,0.5),t='l',lwd=lwd,xlab='',ylab='',cex=largefontsize/smallfontsize,xaxt='n')#
	axis(1,seq(0,30000,by=10000))#
	title(paste('c = ',w,sep=''),cex.main=largefontsize/smallfontsize)#
	mtext('Time, t',side=1,line=2.3,cex=largefontsize/smallfontsize)#
	mtext('Total cost, C(t)',side=2,line=2.2,cex=largefontsize/smallfontsize)#
	points(time[opt_now$best_cat],opt_now$optimized_cat,col=red_blue_purp[1],lwd=lwd,pch=19)#
}#
#
dev.off()
pdf('/Users/eleanorbrush/Desktop/stopping_time.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize,mai=marg,oma=omarg)#
#
layout(matrix(1:3,nrow=1))#
#
w_vals = c(1,0.9,0.6)#
#
f = find(N=25,rho=0.9,w=2500,delta=0,l=0.05)#
#
error = error_cat[,f]#
#
for(i in 1:3){#
	w = w_vals[i]#
	opt_now = optimization_cat(error,w)#
	cost = 2*w*error+(1-w)*time/30001#
	plot(time,cost,ylim=c(0,0.5),t='l',lwd=lwd,xlab='',ylab='',cex=largefontsize/smallfontsize,xaxt='n')#
	axis(1,seq(0,30000,by=10000))#
	title(paste('c = ',w,sep=''),size=largefontsize)#
	mtext('Time, t',side=1,line=2.3,cex=largefontsize/smallfontsize)#
	mtext('Total cost, C(t)',side=2,line=2.2,cex=largefontsize/smallfontsize)#
	points(time[opt_now$best_cat],opt_now$optimized_cat,col=red_blue_purp[1],lwd=lwd,pch=19)#
}#
#
dev.off()
pdf('/Users/eleanorbrush/Desktop/stopping_time.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize,mai=marg,oma=omarg)#
#
layout(matrix(1:3,nrow=1))#
#
w_vals = c(1,0.9,0.6)#
#
f = find(N=25,rho=0.9,w=2500,delta=0,l=0.05)#
#
error = error_cat[,f]#
#
for(i in 1:3){#
	w = w_vals[i]#
	opt_now = optimization_cat(error,w)#
	cost = 2*w*error+(1-w)*time/30001#
	plot(time,cost,ylim=c(0,0.5),t='l',lwd=lwd,xlab='',ylab='',cex=largefontsize/smallfontsize,xaxt='n')#
	axis(1,seq(0,30000,by=10000))#
	title(main=list(paste('c = ',w,sep=''),cex=largefontsize/smallfontsize))#
	mtext('Time, t',side=1,line=2.3,cex=largefontsize/smallfontsize)#
	mtext('Total cost, C(t)',side=2,line=2.2,cex=largefontsize/smallfontsize)#
	points(time[opt_now$best_cat],opt_now$optimized_cat,col=red_blue_purp[1],lwd=lwd,pch=19)#
}#
#
dev.off()
plot(1:10);title(main=list('test',cex=2))
plot(1:10);title(main=list('test',cex=3))
plot(1:10);title(main=list('test',cex=3));mtext('test',side=3)
plot(1:10);title(main=list('test',cex=3));mtext('test',side=3,at=10)
plot(1:10);title(main=list('test',cex=3));mtext('test',side=3,at=10,cex=3)
pdf('/Users/eleanorbrush/Desktop/stopping_time.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize,mai=marg,oma=omarg)#
#
layout(matrix(1:3,nrow=1))#
#
w_vals = c(1,0.9,0.6)#
#
f = find(N=25,rho=0.9,w=2500,delta=0,l=0.05)#
#
error = error_cat[,f]#
#
for(i in 1:3){#
	w = w_vals[i]#
	opt_now = optimization_cat(error,w)#
	cost = 2*w*error+(1-w)*time/30001#
	plot(time,cost,ylim=c(0,0.5),t='l',lwd=lwd,xlab='',ylab='',cex=largefontsize/smallfontsize,xaxt='n')#
	axis(1,seq(0,30000,by=10000))#
	mtext(paste('c = ',w,sep=''),cex=largefontsize/smallfontsize,side=3)#
	mtext('Time, t',side=1,line=2.3,cex=largefontsize/smallfontsize)#
	mtext('Total cost, C(t)',side=2,line=2.2,cex=largefontsize/smallfontsize)#
	points(time[opt_now$best_cat],opt_now$optimized_cat,col=red_blue_purp[1],lwd=lwd,pch=19)#
}#
#
dev.off()
pdf('/Users/eleanorbrush/Desktop/stopping_time.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize,mai=marg,oma=omarg)#
#
layout(matrix(1:3,nrow=1))#
#
w_vals = c(1,0.9,0.6)#
#
f = find(N=25,rho=0.9,w=2500,delta=0,l=0.05)#
#
error = error_cat[,f]#
#
for(i in 1:3){#
	w = w_vals[i]#
	opt_now = optimization_cat(error,w)#
	cost = 2*w*error+(1-w)*time/30001#
	plot(time,cost,ylim=c(0,0.5),t='l',lwd=lwd,xlab='',ylab='',cex=largefontsize/smallfontsize,xaxt='n')#
	axis(1,seq(0,30000,by=10000))#
	mtext(paste('c = ',w,sep=''),cex=largefontsize/smallfontsize,side=3,line=2)#
	mtext('Time, t',side=1,line=2.3,cex=largefontsize/smallfontsize)#
	mtext('Total cost, C(t)',side=2,line=2.2,cex=largefontsize/smallfontsize)#
	points(time[opt_now$best_cat],opt_now$optimized_cat,col=red_blue_purp[1],lwd=lwd,pch=19)#
}#
#
dev.off()
pdf('/Users/eleanorbrush/Desktop/stopping_time.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize,mai=marg,oma=omarg)#
#
layout(matrix(1:3,nrow=1))#
#
w_vals = c(1,0.9,0.6)#
#
f = find(N=25,rho=0.9,w=2500,delta=0,l=0.05)#
#
error = error_cat[,f]#
#
for(i in 1:3){#
	w = w_vals[i]#
	opt_now = optimization_cat(error,w)#
	cost = 2*w*error+(1-w)*time/30001#
	plot(time,cost,ylim=c(0,0.5),t='l',lwd=lwd,xlab='',ylab='',cex=largefontsize/smallfontsize,xaxt='n')#
	axis(1,seq(0,30000,by=10000))#
	mtext(paste('c = ',w,sep=''),cex=largefontsize/smallfontsize,side=3,line=1.2)#
	mtext('Time, t',side=1,line=2.3,cex=largefontsize/smallfontsize)#
	mtext('Total cost, C(t)',side=2,line=2.2,cex=largefontsize/smallfontsize)#
	points(time[opt_now$best_cat],opt_now$optimized_cat,col=red_blue_purp[1],lwd=lwd,pch=19)#
}#
#
dev.off()
pdf('/Users/eleanorbrush/Desktop/stopping_time.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize,mai=marg,oma=omarg)#
#
layout(matrix(1:3,nrow=1))#
#
w_vals = c(1,0.9,0.6)#
#
f = find(N=25,rho=0.9,w=2500,delta=0,l=0.05)#
#
error = error_cat[,f]#
#
for(i in 1:3){#
	w = w_vals[i]#
	opt_now = optimization_cat(error,w)#
	cost = 2*w*error+(1-w)*time/30001#
	plot(time,cost,ylim=c(0,0.5),t='l',lwd=lwd,xlab='',ylab='',cex=largefontsize/smallfontsize,xaxt='n')#
	axis(1,seq(0,30000,by=10000))#
	mtext(paste('c = ',w,sep=''),cex=largefontsize/smallfontsize,side=3,line=1)#
	mtext('Time, t',side=1,line=2.3,cex=largefontsize/smallfontsize)#
	mtext('Total cost, C(t)',side=2,line=2.2,cex=largefontsize/smallfontsize)#
	points(time[opt_now$best_cat],opt_now$optimized_cat,col=red_blue_purp[1],lwd=lwd,pch=19)#
}#
#
dev.off()
pdf('/Users/eleanorbrush/Desktop/stopping_time.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize,mai=marg,oma=omarg)#
#
layout(matrix(1:3,nrow=1))#
#
w_vals = c(1,0.9,0.6)#
#
f = find(N=25,rho=0.9,w=2500,delta=0,l=0.05)#
#
error = error_cat[,f]#
#
for(i in 1:3){#
	w = w_vals[i]#
	opt_now = optimization_cat(error,w)#
	cost = 2*w*error+(1-w)*time/30001#
	plot(time,cost,ylim=c(0,0.5),t='l',lwd=lwd,xlab='',ylab='',cex=largefontsize/smallfontsize,xaxt='n')#
	axis(1,seq(0,30000,by=10000))#
	mtext(paste('c = ',w,sep=''),cex=largefontsize/smallfontsize,side=3,line=0.8)#
	mtext('Time, t',side=1,line=2.3,cex=largefontsize/smallfontsize)#
	mtext('Total cost, C(t)',side=2,line=2.2,cex=largefontsize/smallfontsize)#
	points(time[opt_now$best_cat],opt_now$optimized_cat,col=red_blue_purp[1],lwd=lwd,pch=19)#
}#
#
dev.off()
pdf('/Users/eleanorbrush/Desktop/stopping_time.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize,mai=marg,oma=omarg)#
#
layout(matrix(1:3,nrow=1))#
#
w_vals = c(1,0.9,0.6)#
#
f = find(N=25,rho=0.9,w=2500,delta=0,l=0.05)#
#
error = error_cat[,f]#
#
for(i in 1:3){#
	w = w_vals[i]#
	opt_now = optimization_cat(error,w)#
	cost = 2*w*error+(1-w)*time/30001#
	plot(time,cost,ylim=c(0,0.5),t='l',lwd=lwd,xlab='',ylab='',cex=largefontsize/smallfontsize,xaxt='n')#
	axis(1,seq(0,30000,by=10000))#
	mtext(paste('c = ',w,sep=''),cex=largefontsize/smallfontsize,side=3,line=0.6)#
	mtext('Time, t',side=1,line=2.3,cex=largefontsize/smallfontsize)#
	mtext('Total cost, C(t)',side=2,line=2.2,cex=largefontsize/smallfontsize)#
	points(time[opt_now$best_cat],opt_now$optimized_cat,col=red_blue_purp[1],lwd=lwd,pch=19)#
}#
#
dev.off()
pdf('/Users/eleanorbrush/Desktop/stopping_time.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize,mai=marg,oma=omarg)#
#
layout(matrix(1:3,nrow=1))#
#
w_vals = c(1,0.9,0.6)#
#
f = find(N=25,rho=0.9,w=2500,delta=0,l=0.05)#
#
error = error_cat[,f]#
#
for(i in 1:3){#
	w = w_vals[i]#
	opt_now = optimization_cat(error,w)#
	cost = 2*w*error+(1-w)*time/30001#
	plot(time,cost,ylim=c(0,0.5),t='l',lwd=lwd,xlab='',ylab='',cex=largefontsize/smallfontsize,xaxt='n')#
	axis(1,seq(0,30000,by=10000))#
	mtext(paste('c = ',w,sep=''),cex=largefontsize/smallfontsize,side=3,line=0.56)#
	mtext('Time, t',side=1,line=2.3,cex=largefontsize/smallfontsize)#
	mtext('Total cost, C(t)',side=2,line=2.2,cex=largefontsize/smallfontsize)#
	points(time[opt_now$best_cat],opt_now$optimized_cat,col=red_blue_purp[1],lwd=lwd,pch=19)#
}#
#
dev.off()
pdf('/Users/eleanorbrush/Desktop/stopping_time.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize,mai=marg,oma=omarg)#
#
layout(matrix(1:3,nrow=1))#
#
w_vals = c(1,0.9,0.6)#
#
f = find(N=25,rho=0.9,w=2500,delta=0,l=0.05)#
#
error = error_cat[,f]#
#
for(i in 1:3){#
	w = w_vals[i]#
	opt_now = optimization_cat(error,w)#
	cost = 2*w*error+(1-w)*time/30001#
	plot(time,cost,ylim=c(0,0.5),t='l',lwd=lwd,xlab='',ylab='',cex=largefontsize/smallfontsize,xaxt='n')#
	axis(1,seq(0,30000,by=10000))#
	mtext(paste('c = ',w,sep=''),cex=largefontsize/smallfontsize,side=3,line=0.5)#
	mtext('Time, t',side=1,line=2.3,cex=largefontsize/smallfontsize)#
	mtext('Total cost, C(t)',side=2,line=2.2,cex=largefontsize/smallfontsize)#
	points(time[opt_now$best_cat],opt_now$optimized_cat,col=red_blue_purp[1],lwd=lwd,pch=19)#
}#
#
dev.off()
library(lattice)#
library(pracma)#
library(ggplot2)#
library(grid)#
library(gridExtra)#
library(gtable)#
library(digest)#
library(RColorBrewer)#
setwd('/Users/eleanorbrush/Dropbox/evo_badgesVSrecognition/code_extended_model')#
source('get_legend.R')#
load('noise=0.1/all_parameters.Rdata')#
source('sub2ind.R')#
source('ind2sub.R')#
#
parameters_cat_to_plot = parameters_cat#
parameters_cat_to_plot$w[parameters_cat$w==Inf] = 3000#
#
parameters_rule_to_plot = parameters_rule#
parameters_rule_to_plot$w[parameters_rule$w==Inf] = 3000#
#
Tfights = fixed_parameters$Tfights#
down_sample = fixed_parameters$down_sample#
time = seq(1,fixed_parameters$Tfights,by=fixed_parameters$down_sample)#
xN_cat = length(unique(parameters_cat$N))#
xdelta_cat = length(unique(parameters_cat$delta))#
xl_cat = length(unique(parameters_cat$l))#
xw_cat = length(unique(parameters_cat$w))#
xrho_cat = length(unique(parameters_cat$rho))#
dim_cat = data.frame(N=xN_cat,rho=xrho_cat,w=xw_cat,delta=xdelta_cat,l=xl_cat)#
xN_rule = length(unique(parameters_rule$N))#
xdelta_rule = length(unique(parameters_rule$delta))#
xl_rule = length(unique(parameters_rule$l))#
xw_rule = length(unique(parameters_rule$w))#
xrho_rule = length(unique(parameters_rule$rho))#
dim_rule = data.frame(N=xN_rule,rho=xrho_rule,w=xw_rule,delta=xdelta_rule,l=xl_rule)#
#
find <- function(N=NA,rho=NA,w=NA,delta=NA,l=NA,c=NA,p=parameters_cat){#
	params = unlist(as.list(environment())[1:6])#
	provided = which(!is.na(params))#
	vec = 1:dim(p)[1]#
	for(i in provided){#
		now = names(params)[i]#
		vec = intersect(vec,which(p[[now]]==params[i]))#
	}#
	return(vec)#
}#
#
find_df <- function(params,p=parameters_cat){#
	to_return = NULL#
	for(j in 1:dim(params)[1]){	#
		provided = which(!is.na(params[j,]))#
		vec = 1:dim(p)[1]#
		for(i in provided){#
			now = names(params)[i]#
			vec = intersect(vec,which(p[[now]]==params[[now]][j]))#
		}#
	if(sum(dim(p)==dim(parameters_cat))==2){#
		if(sum(p==parameters_cat)==prod(dim(p)) && length(vec)<prod(dim_cat)/prod(dim_cat[provided])){#
			vec = c(vec,rep(NA,prod(dim_cat)/prod(dim_cat[provided])-length(vec)))#
		}#
	}#
	if(sum(dim(p)==dim(parameters_rule))==2){#
		if(sum(p==parameters_rule)==prod(dim(p)) && length(vec)<prod(dim_rule)/prod(dim_rule[provided])){#
			vec = c(vec,rep(NA,prod(dim_rule)/prod(dim_rule[provided])-length(vec)))#
		}#
	}#
	to_return = rbind(to_return,vec)#
	}#
	return(to_return)#
}#
#
myround <-function(x,digits){#
	round(x*10^digits)/10^digits#
}#
#
moving_average <- function(v,k=5,keep_end=TRUE){#
	v2 = array(NA,dim=c(length(v),1))#
	if(keep_end){#
		M = length(v)#
	}else{#
		M = length(v)-floor((k-1)/2)#
	}#
	for(i in 1:M){#
		v2[i] = mean(v[i+(max(-floor(k/2),0):min(floor((k-1)/2),length(v)))],na.rm=TRUE)#
	}#
	return(v2)#
}#
#
moving_var <- function(v,k=5,keep_end=TRUE){#
	v2 = array(NA,dim=c(length(v),1))#
	if(keep_end){#
		M = length(v)#
	}else{#
		M = length(v)-floor((k-1)/2)#
	}#
	for(i in 1:M){#
		v2[i] = var(v[i+(max(-floor(k/2),0):min(floor((k-1)/2),length(v)))],na.rm=TRUE)#
	}#
	return(v2)#
}#
#
find_changes <- function(s){#
	intersect(which(diff(s)!=0),intersect(which(c(diff(s)[2:(length(s)-1)],0)==0),which(c(0,diff(s)[1:(length(s)-2)])==0)))+1#
}#
#
find_changes_immediate <- function(s){#
	which(diff(s)!=0)+1#
}#
#
optimization<- function(w){	#
	cost_cat = apply(error_cat,2,function(v) 2*w*v+(1-w)*time/30001)#
	best_cat = array(NA,dim(parameters_cat)[1])#
	start = 3#
	start2 = 10#
	start3 = 20#
	noisy  = array(NA,dim(parameters_cat)[1])#
	for(i in 1:dim(parameters_cat)[1]){#
		d = c(rep(NA,start-1),diff(cost_cat[start:length(time),i]))#
		k = 70#
		d_avg = moving_average(d,k)#
		# d_var = moving_var(d,10)#
		d_var = moving_var(error_cat[start:length(time),i],10)#
		max_var = max(d_var[start3:length(d_var)],na.rm=TRUE)#
		M = diff(range(error_cat[start2:length(time),i],na.rm=TRUE))#
		# if((diff(range(error_cat[start2:dim(cost_cat)[1],i],na.rm=TRUE)))>0.15){#
		if(M>0.075 && max_var<0.00006*M){#
			offset = 4#
			s = sign(myround(d_avg,4.2))#
			# }else if((diff(range(error_cat[start2:dim(cost_cat)[1],i],na.rm=TRUE)))>0.1){#
			noisy[i] = FALSE			#
			}else if((M>0.1 && max_var<0.0004*M && w<1) || max_var<0.00018*M){				#
			offset = 4#
			s = sign(myround(d_avg,3.3))#
			noisy[i] = TRUE			#
			}else{#
			offset = 8#
			s = sign(myround(d_avg,3.1))	#
			noisy[i] = TRUE#
			}#
		# if((noisy && !(parameters_cat$N[i]==25 && parameters_cat$w[i]>=2500)) || w==1){#
			s[s==0] = 1		#
		# }else{#
			# s[s==0] = -1#
		# }#
		z = apply(matrix(1:length(s),ncol=1),1,function(x) identical(s[(max(0,x-offset):min(length(s),x+offset))],rep(s[x],offset*2+1)))#
		if(length(s[z])>1){#
			f = which(z)[find_changes(s[z])]-offset#
		}else{#
			f = NULL#
		}	#
		if(length(f)==0 || length(f)>3){#
			if(sum(z)==0 || max(s[z],na.rm=TRUE)>(-1)){#
				best_cat[i] = start2#
			} else{#
				best_cat[i] = length(time)#
			}#
		}else {#
			if(max(s[f])==-1){#
				best_cat[i] = length(time)#
			}else{#
				best_cat[i] = min(f[which(s[f]>(-1))])#
			}#
		}#
	}#
	optimized_cat = apply(matrix(c(best_cat,1:dim(parameters_cat)[1]),nrow=2,byrow=TRUE),2,function(x) cost_cat[x[1],x[2]])#
	# best_cat[intersect(which(best_cat==start2),which(noisy))] = 1#
	cost_rule = apply(error_rule,2,function(v) 2*w*v+(1-w)*time/30001)#
	best_rule = array(NA,dim(parameters_rule)[1])#
	start = 3#
	start2 = 10#
	start3 = 20#
	for(i in 1:dim(parameters_rule)[1]){#
		d = c(rep(NA,start-1),diff(cost_rule[start:length(time),i]))#
		k = 5#
		d_avg = moving_average(d,k,keep_end=FALSE)[1:(length(d)-floor((k-1)/2))]	#
		d_var = moving_var(error_rule[start:length(time),i],10)	#
		offset = 5#
		s = sign(myround(d_avg,3))	#
		if(w<0.8){#
			offset = 6#
			s = sign(myround(d_avg,3.2))#
		}else if(max(d_var[start3:length(d_var)],na.rm=TRUE)<4e-05){				#
			offset = 6#
			s = sign(myround(d_avg,3.1)) ##changed from 3.1, which was changed from 3.15#
		}else{#
			offset = 10#
			s = sign(myround(d_avg,3))	#
		}#
		z = apply(matrix(1:length(s),ncol=1),1,function(x) identical(s[(max(0,x-offset):min(length(s),x+offset))],rep(s[x],offset*2+1)))#
		if(length(s[z])>1){#
			f = which(z)[find_changes_immediate(s[z])]-offset#
		}else{#
			f = NULL#
		}	#
		if(length(f)==0 || length(f)>3){#
			if(sum(z)==0 || max(s[z],na.rm=TRUE)>(-1)){#
				best_rule[i] = start2#
			} else{#
				best_rule[i] = length(time)#
			}#
		}else {#
			if(max(s[f])==-1){#
				best_rule[i] = length(time)#
			}else{#
				best_rule[i] = min(f[which(s[f]>(-1))])#
			}#
		}#
	}#
	optimized_rule = apply(matrix(c(best_rule,1:dim(parameters_rule)[1]),nrow=2,byrow=TRUE),2,function(x) cost_rule[x[1],x[2]])#
#
	# best_rule[best_rule==start2] = 1#
	return(list(best_cat=best_cat,optimized_cat=optimized_cat,best_rule=best_rule,optimized_rule=optimized_rule))#
}#
#
optimization_cat<- function(error,w){#
	if(length(error)>length(time)){#
	N = error[length(time)+1]#
	wind = error[length(time)+2]#
	error = error[1:length(time)]	#
	}else{#
		N = 25#
		wind = Inf#
	}#
	cost = 2*w*error+(1-w)*time/30001#
	start = 3#
	start2 = 10#
	start3 = 20#
	noisy  = NA#
	best_cat = NA#
#
	d = c(rep(NA,start-1),diff(cost[start:length(cost)]))#
	k = 70#
	d_avg = moving_average(d,k)#
	# d_var = moving_var(d,10)#
	d_var = moving_var(error[start:length(error)],10)#
	max_var = max(d_var[start3:length(d_var)],na.rm=TRUE)#
	M = diff(range(error[start2:length(error)],na.rm=TRUE))#
	# if((diff(range(error_cat[start2:dim(cost_cat)[1],i],na.rm=TRUE)))>0.15){#
	if(M>0.075 && max_var<0.00006*M){#
		offset = 4#
		s = sign(myround(d_avg,4.2))#
		# }else if((diff(range(error_cat[start2:dim(cost_cat)[1],i],na.rm=TRUE)))>0.1){#
		noisy = FALSE		#
		}else if((M>0.1 && max_var<0.0004*M && w<1) || max_var<0.00018*M){	###changed to 0.9 from 1		#
		offset = 4#
		s = sign(myround(d_avg,3.3))#
		noisy = TRUE		#
		}else{#
		offset = 8#
		s = sign(myround(d_avg,3.1))	#
		noisy = TRUE		#
		}#
	# if((noisy && !(N==25 && wind>=2500)) || w>=0.8){#
		s[s==0] = 1		#
	# }else{#
		# s[s==0] = -1#
	# }			#
	z = apply(matrix(1:length(s),ncol=1),1,function(x) identical(s[(max(0,x-offset):min(length(s),x+offset))],rep(s[x],offset*2+1)))#
	if(length(s[z])>1){#
		f = which(z)[find_changes(s[z])]-offset#
	}else{#
		f = NULL#
	}	#
	if(length(f)==0 || length(f)>3){#
		if(sum(z)==0 || max(s[z],na.rm=TRUE)>(-1)){#
			best_cat = start2#
		} else{#
			best_cat = length(error)#
		}#
	}else {#
		if(max(s[f])==-1){#
			best_cat = length(error)#
		}else{#
			best_cat = min(f[which(s[f]>(-1))])#
		}#
	}	#
	optimized_cat = cost[best_cat]#
	#if(best_cat==start2 && noisy){best_cat=1} #
	return(list(best_cat=best_cat,optimized_cat=optimized_cat))#
}	#
optimization_rule<- function(error,w){		#
	cost = 2*w*error+(1-w)*time/30001#
	start = 3#
	start2 = 10#
	start3 = 20#
	best_rule = NA#
	d = c(rep(NA,start-1),diff(cost[start:length(cost)]))#
	k = 5#
	d_avg = moving_average(d,k,keep_end=FALSE)[1:(length(d)-floor((k-1)/2))]	#
	d_var = moving_var(error[start:length(error)],10)	#
	offset = 5#
	s = sign(myround(d_avg,3))	#
	if(w<0.8){#
			offset = 6#
			s = sign(myround(d_avg,3.2))#
		}else if(max(d_var[start3:length(d_var)],na.rm=TRUE)<4e-05){				#
			offset = 6#
			s = sign(myround(d_avg,3.1)) ##changed from 3.1, which was changed from 3.15#
		}else{#
			offset = 10#
			s = sign(myround(d_avg,3))	#
		}#
	z = apply(matrix(1:length(s),ncol=1),1,function(x) identical(s[(max(0,x-offset):min(length(s),x+offset))],rep(s[x],offset*2+1)))#
	if(length(s[z])>1){#
		f = which(z)[find_changes_immediate(s[z])]-offset#
	}else{#
		f = NULL#
	}	#
	if(length(f)==0 || length(f)>3){#
		if(sum(z)==0 || max(s[z],na.rm=TRUE)>(-1)){#
			best_rule = start2#
		} else{#
			best_rule = length(time)#
		}#
	}else {#
		if(max(s[f])==-1){#
			best_rule = length(time)#
		}else{#
			best_rule = min(f[which(s[f]>(-1))])#
		}#
	}#
	optimized_rule = cost[best_rule]#
#
	# best_rule[best_rule==start2] = 1#
	return(list(best_rule=best_rule,optimized_rule=optimized_rule))#
}#
#
####### plotting parameters#
fontfamily = 'Helvetica'#
smallfontsize = 10#
largefontsize = 12#
#
lwd=2#
squish = log#
# unsquish = function(x){x^2}#
unsquish = exp#
#
#### palettes #
#
set1cols=brewer.pal(5,'Set1')#
# warm_pal = brewer.pal(8,'Spectral')[-5]#
red_pal = rev(brewer.pal(9,'Reds'))#
blue_pal = rev(brewer.pal(9,'Blues')[2:9])#
two_blues = brewer.pal(9,'Blues')[c(4,6)]#
div_pal = brewer.pal(11,'RdBu')#
red_blue_purp = c(brewer.pal(9,'Reds')[7],brewer.pal(9,'Blues')[c(4,6,7)],brewer.pal(9,'Greys')[5])#
purp_pal = brewer.pal(9,'Purples')[c(5,7,8)]#
green_pal = brewer.pal(9,'Greens')[c(3,5,7,8)]#
#### optimization over nearly all parameters#
examples_optimized = data.frame(N=rep(c(25,50,100),each=(xw_cat)*xrho_cat),rho=rep(rep(c(0.5,0.9,0.99),each=xw_cat),times=xN_cat),w=rep(c(250,500,1000,1500,2000,2500,Inf),times=xN_cat*xrho_cat))#
#
# w_vec = seq(0.5,1,by=0.1)#
# f_cat = as.vector(find_df(examples_optimized,p=parameters_cat))#
# f_rule = as.vector(find_df(examples_optimized,p=parameters_rule))#
#
# optimal_cognition_cat = data.frame(c=c(),N=c(),rho=c(),w=c(),delta=c(),l=c(),cost=c(),time=c(),error=c())#
# optimal_cognition_rule = data.frame(c=c(),N=c(),rho=c(),w=c(),delta=c(),l=c(),cost=c(),time=c(),error=c())#
#
# for(j in 1:length(w_vec)){#
	# w = w_vec[j]#
	# opt = apply(rbind(error_cat[,f_cat],parameters_cat$N[f_cat],parameters_cat$w[f_cat]),2,optimization_cat,w=w)#
	# optimized_cat = unlist(lapply(opt,function(x) x$optimized_cat))#
	# best_cat = unlist(lapply(opt,function(x) x$best_cat))#
	# opt = apply(error_rule[,f_rule],2,optimization_rule,w=w)#
	# optimized_rule = unlist(lapply(opt,function(x) x$optimized_rule))#
	# best_rule = unlist(lapply(opt,function(x) x$best_rule))#
	# for(i in 1:dim(examples_optimized)[1]){#
		# f = find(N=examples_optimized$N[i],rho=examples_optimized$rho[i],w=examples_optimized$w[i],p=parameters_cat[f_cat,])#
		# best = f[which.min(optimized_cat[f])]#
		# optimal_cognition_cat = rbind(optimal_cognition_cat,data.frame(c=w,N=examples_optimized$N[i],rho=examples_optimized$rho[i],w=examples_optimized$w[i],delta=parameters_cat$delta[f_cat[best]],l=parameters_cat$l[f_cat[best]],cost=optimized_cat[best],time=best_cat[best],error=error_cat[best_cat[best],f_cat[best]]))#
		# f = find(N=examples_optimized$N[i],rho=examples_optimized$rho[i],w=examples_optimized$w[i],p=parameters_rule[f_rule,])#
		# if(!isempty(f)){#
			# optimal_cognition_rule = rbind(optimal_cognition_rule,data.frame(c=w,N=examples_optimized$N[i],rho=examples_optimized$rho[i],w=examples_optimized$w[i],delta=0,l=0.05,cost=optimized_rule[f],time=best_rule[f],error=error_rule[best_rule[f],f_rule[f]]))#
		# }#
	# }#
# }#
#
# optimal_cognition_gen = data.frame(c=c(),N=c(),rho=c(),w=c(),delta=c(),l=c(),cost=c(),time=c(),error=c())#
#
# for(j in 1:length(w_vec)){#
	# w = w_vec[j]#
	# for(i in 1:dim(examples_optimized)[1]){		#
		# f = find(N=examples_optimized$N[i],rho=examples_optimized$rho[i],p=parameters_genetic)#
		# optimal_cognition_gen = rbind(optimal_cognition_gen,data.frame(c=w,N=examples_optimized$N[i],rho=examples_optimized$rho[i],w=examples_optimized$w[i],cost=w*2*error_genetic[1,f],time=1,error=error_genetic[1,f]))#
	# }#
# }#
#
# optimal_cognition_rule$w[which(optimal_cognition_rule$w==250)] = 0#
# optimal_cognition_cat$w[which(optimal_cognition_cat$w==250)] = 0#
# optimal_cognition_cat$w[which(optimal_cognition_cat$w==Inf)] = 3000#
# optimal_cognition_gen$w[which(optimal_cognition_gen$w==250)] = 0#
# optimal_cognition_gen$w[which(optimal_cognition_gen$w==Inf)] = 3000#
#
# optimal_cognition_rule_expanded = data.frame(c=c(),N=c(),rho=c(),w=c(),delta=c(),l=c(),cost=c(),time=c(),error=c())#
# hold = optimal_cognition_rule[find(w=2500,p=optimal_cognition_rule),]#
# hold$w = 3000#
# for(i in 1:length(hold$w)){#
	# optimal_cognition_rule_expanded = rbind(optimal_cognition_rule_expanded,optimal_cognition_rule[(1:6)+(i-1)*6,],hold[i,])#
# }#
# optimal_cognition_rule = optimal_cognition_rule_expanded#
# rm(optimal_cognition_rule_expanded)#
#
# # save(optimal_cognition_rule,optimal_cognition_cat,optimal_cognition_gen,file='optimal_cognition.Rdata')#
#
load('optimal_cognition.Rdata')#
w_vec = unique(optimal_cognition_cat$c)
find(N=25,w=500,c=0.6,p=optimal_cognition_cat)
#### error and stopping time as a function of c#
#
examples = data.frame(N=c(50,25,25),rho=c(0.5,0.9,0.99),w=c(2500,2500,250),delta=c(0,0,0),l=c(0.25,0.25,0.25))#
examples = data.frame(N=c(25,25),rho=c(0.99,0.9),w=c(2500,2500),delta=c(0,0),l=c(0.5,0.5))#
examples_delta = examples#
examples_delta$delta = 0.25#
num_ex = dim(examples)[1]#
rule_relevant = intersect(which(names(examples)!='delta'),which(names(examples)!='l'))#
gen_relevant = rule_relevant[which(names(examples)[rule_relevant]!='w')]#
#
w_vec = seq(0,1,by=0.1)#
f_recog = as.vector(find_df(examples[1,],p=parameters_cat))#
f_cat = as.vector(find_df(examples_delta,p=parameters_cat))#
f_rule = as.vector(find_df(examples[,rule_relevant],p=parameters_rule))#
#
opt_c_recog = array(NA,length(w_vec))#
opt_c_cat = array(NA,dim=c(dim(examples)[1],length(w_vec)))#
opt_c_rule = array(NA,dim=c(dim(examples)[1],length(w_vec)))#
best_c_recog = array(NA,length(w_vec))#
best_c_cat = array(NA,dim=c(dim(examples)[1],length(w_vec)))#
best_c_rule = array(NA,dim=c(dim(examples)[1],length(w_vec)))#
#
for(j in 1:length(w_vec)){#
	w = w_vec[j]#
	opt = optimization_cat(c(error_cat[,f_recog],parameters_cat$N[f_recog],parameters_cat$w[f_recog]),w)#
	opt_c_recog[j] = error_cat[opt$best_cat,f_recog]#
	best_c_recog[j] = opt$best_cat#
	opt = apply(rbind(error_cat[,f_cat],parameters_cat$N[f_cat],parameters_cat$w[f_cat]),2,optimization_cat,w=w)#
	best_cat = unlist(lapply(opt,function(x) x$best_cat))#
	opt_c_cat[,j] = apply(matrix(1:length(f_cat),nrow=1),2,function(i){error_cat[best_cat[i],f_cat[i]]})#
	best_c_cat[,j] = best_cat#
	opt = apply(error_rule[,f_rule],2,optimization_rule,w=w)#
	best_rule = unlist(lapply(opt,function(x) x$best_rule))	#
	opt_c_rule[,j] = apply(matrix(1:length(f_rule),nrow=1),2,function(i){error_rule[best_rule[i],f_rule[i]]})#
	best_c_rule[,j] = best_rule#
}#
#### run optimization #
w=1#
# opt_no_time_costs = optimization(w)#
#
w=0.9#
# opt_small_time_costs = optimization(w)#
load('/Users/eleanorbrush/Dropbox/evo_badgesVSrecognition/code_extended_model/opt_data.Rdata')#
#
best_cat = opt_no_time_costs$best_cat#
optimized_cat = opt_no_time_costs$optimized_cat/2#
best_rule = opt_no_time_costs$best_rule#
optimized_rule = opt_no_time_costs$optimized_rule/2#
best_gen = rep(squish(10),dim(parameters_genetic)[1])#
optimized_gen = error_genetic[1,]
find(N=25,w=500,delta=0,l=0.5)
str(optimized_cat)
plot(error_cat[,70],t='l',ylim=c(0,0.5))
optimal_cognition_cat[find(N=25,w=500,c=0.6,p=optimal_cognition_cat),]
plot(error_cat[,70],t='l',ylim=c(0.1,0.15))
plot(error_cat[,70],t='l',ylim=c(0.05,0.15))
abline(v=14)
lines(error_cat[,490],col='red')
lines(error_cat[,910],col='blue')
marg = c(0.5,0.48,0.04,0.1)#
omarg = c(0.25,0.33,0.3,0.0)
#### learned rule heat maps#
M_time = squish(time[c(10,78)])#
#
contour_time = list()#
#
for(i in 1:3){#
	for(j in 1:3){#
		I = sub2ind(c(xN_cat,xrho_cat),c(i,j))#
		f_cat_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_cat)#
		f_rule_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_rule)#
		time_df = data.frame(w=optimal_cognition_rule$w[f_rule_now],c=optimal_cognition_rule$c[f_rule_now],time=squish(time[optimal_cognition_rule$time[f_rule_now]]))		#
		contour_time[[I]] = ggplot(time_df,aes(x=c,y=w,z=time)) +#
			geom_tile(aes(fill=time))+#
			scale_fill_gradientn(colours=rev(blue_pal),limits=M_time,guide='colorbar')+#
			theme_bw()+ theme(text=element_text(family="Helvetica", size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position='none')+#
			scale_y_continuous(expand = c(0,0),breaks=seq(000,3000,by=500),labels=c(250,seq(500,2500,by=500),'All')) + scale_x_continuous(expand = c(0,0),breaks=seq(0,1,by=0.25),limits=c(0.45,1.05))+#
			ylab('Memory window, w') + xlab('Cost of errors, c')#
	}#
}#
#
time_fake = data.frame(z =seq(M_time[1],M_time[2],length.out = 22), x = 1:22,y = 1:22)#
#
time_legend = ggplot(time_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(blue_pal),limits=M_time,breaks = squish(c(500,1000,2000,4000,16000)),labels=c(500,1000,2000,4000,16000))+labs(fill=expression(paste('Time, ',tau,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), plot.title=element_text(size=smallfontsize),legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
time_legend = get_legend(time_legend)
blank <- grid.rect(gp=gpar(col="white"))
#### learned rule heat maps#
M_time = squish(time[c(10,78)])#
#
contour_time = list()#
#
for(i in 1:3){#
	for(j in 1:3){#
		I = sub2ind(c(xN_cat,xrho_cat),c(i,j))#
		f_cat_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_cat)#
		f_rule_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_rule)#
		time_df = data.frame(w=optimal_cognition_rule$w[f_rule_now],c=optimal_cognition_rule$c[f_rule_now],time=squish(time[optimal_cognition_rule$time[f_rule_now]]))		#
		contour_time[[I]] = ggplot(time_df,aes(x=c,y=w,z=time)) +#
			geom_tile(aes(fill=time))+#
			scale_fill_gradientn(colours=rev(blue_pal),limits=M_time,guide='colorbar')+#
			theme_bw()+ theme(text=element_text(family="Helvetica", size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position='none')+#
			scale_y_continuous(expand = c(0,0),breaks=seq(000,3000,by=500),labels=c(250,seq(500,2500,by=500),'All')) + scale_x_continuous(expand = c(0,0),breaks=seq(0,1,by=0.25),limits=c(0.45,1.05))+#
			ylab('Memory window, w') + xlab('Cost of errors, c')#
	}#
}#
#
time_fake = data.frame(z =seq(M_time[1],M_time[2],length.out = 22), x = 1:22,y = 1:22)#
#
time_legend = ggplot(time_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(blue_pal),limits=M_time,breaks = squish(c(500,1000,2000,4000,16000)),labels=c(500,1000,2000,4000,16000))+labs(fill=expression(paste('Time, ',tau,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), plot.title=element_text(size=smallfontsize),legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
time_legend = get_legend(time_legend)#
#
graphics.off()#
width = 6.85#
height= 4#
#
pdf('/Users/eleanorbrush/Desktop/time_heat_maps_rule.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize)#
#
grid.arrange(blank,contour_time[[4]],contour_time[[5]],contour_time[[6]],time_legend,blank,contour_time[[7]],contour_time[[8]],contour_time[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))#
#
dev.off()#
#
M_error = c(0,0.29)#
#
contour_error = list()#
#
for(i in 1:3){#
	for(j in 1:3){#
		I = sub2ind(c(xN_cat,xrho_cat),c(i,j))#
		f_cat_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_cat)#
		f_rule_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_rule)#
		error_df = data.frame(w=optimal_cognition_rule$w[f_rule_now],c=optimal_cognition_rule$c[f_rule_now],error=optimal_cognition_rule$error[f_rule_now])		#
		contour_error[[I]] = ggplot(error_df,aes(x=c,y=w,z=error)) +#
			geom_tile(aes(fill=error))+#
			scale_fill_gradientn(colours=rev(red_pal),limits=M_error,guide='colorbar')+#
			theme_bw()+ theme(text=element_text(family="Helvetica", size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position='none')+#
			scale_y_continuous(expand = c(0,0),breaks=seq(000,3000,by=500),labels=c(250,seq(500,2500,by=500),'All')) + scale_x_continuous(expand = c(0,0),breaks=seq(0,1,by=0.25),limits=c(0.45,1.05))+#
			ylab('Memory window, w') + xlab('Cost of errors, c')#
	}#
}#
#
error_fake = data.frame(z =seq(M_error[1],M_error[2],length.out = 22), x = 1:22,y = 1:22)#
#
error_legend = ggplot(error_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(red_pal),limits=M_error,breaks = seq(round(M_error[1],1),round(M_error[2],1),by=0.1), labels = seq(round(M_error[1],1),round(M_error[2],1),by=0.1))+labs(fill=expression(paste('Error, ',epsilon,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
error_legend = get_legend(error_legend)#
#
graphics.off()#
#
width = 6.85#
height= 4#
#
pdf('/Users/eleanorbrush/Desktop/error_heat_maps_rule.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize)#
#
grid.arrange(blank,contour_error[[4]],contour_error[[5]],contour_error[[6]],error_legend,blank,contour_error[[7]],contour_error[[8]],contour_error[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))#
#
dev.off()
time_legend = ggplot(time_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(blue_pal),limits=M_time,breaks = squish(c(500,1000,2000,4000,16000)),labels=c(500,1000,2000,4000,16000))+labs(fill=expression(paste('Time, ',tau,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(),legend.text=element_text(size=smallfontsize))
time_legend = get_legend(time_legend)
graphics.off()#
width = 6.85#
height= 4#
#
pdf('/Users/eleanorbrush/Desktop/time_heat_maps_rule.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize)#
#
grid.arrange(blank,contour_time[[4]],contour_time[[5]],contour_time[[6]],time_legend,blank,contour_time[[7]],contour_time[[8]],contour_time[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))#
#
dev.off()#
#
M_error = c(0,0.29)#
#
contour_error = list()#
#
for(i in 1:3){#
	for(j in 1:3){#
		I = sub2ind(c(xN_cat,xrho_cat),c(i,j))#
		f_cat_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_cat)#
		f_rule_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_rule)#
		error_df = data.frame(w=optimal_cognition_rule$w[f_rule_now],c=optimal_cognition_rule$c[f_rule_now],error=optimal_cognition_rule$error[f_rule_now])		#
		contour_error[[I]] = ggplot(error_df,aes(x=c,y=w,z=error)) +#
			geom_tile(aes(fill=error))+#
			scale_fill_gradientn(colours=rev(red_pal),limits=M_error,guide='colorbar')+#
			theme_bw()+ theme(text=element_text(family="Helvetica", size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position='none')+#
			scale_y_continuous(expand = c(0,0),breaks=seq(000,3000,by=500),labels=c(250,seq(500,2500,by=500),'All')) + scale_x_continuous(expand = c(0,0),breaks=seq(0,1,by=0.25),limits=c(0.45,1.05))+#
			ylab('Memory window, w') + xlab('Cost of errors, c')#
	}#
}#
#
error_fake = data.frame(z =seq(M_error[1],M_error[2],length.out = 22), x = 1:22,y = 1:22)#
#
error_legend = ggplot(error_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(red_pal),limits=M_error,breaks = seq(round(M_error[1],1),round(M_error[2],1),by=0.1), labels = seq(round(M_error[1],1),round(M_error[2],1),by=0.1))+labs(fill=expression(paste('Error, ',epsilon,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
error_legend = get_legend(error_legend)#
#
graphics.off()#
#
width = 6.85#
height= 4#
#
pdf('/Users/eleanorbrush/Desktop/error_heat_maps_rule.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize)#
#
grid.arrange(blank,contour_error[[4]],contour_error[[5]],contour_error[[6]],error_legend,blank,contour_error[[7]],contour_error[[8]],contour_error[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))#
#
dev.off()
#### learned rule heat maps#
M_time = squish(time[c(10,601)])#
#
contour_time = list()#
#
for(i in 1:3){#
	for(j in 1:3){#
		I = sub2ind(c(xN_cat,xrho_cat),c(i,j))#
		f_cat_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_cat)#
		f_rule_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_rule)#
		time_df = data.frame(w=optimal_cognition_rule$w[f_rule_now],c=optimal_cognition_rule$c[f_rule_now],time=squish(time[optimal_cognition_rule$time[f_rule_now]]))		#
		contour_time[[I]] = ggplot(time_df,aes(x=c,y=w,z=time)) +#
			geom_tile(aes(fill=time))+#
			scale_fill_gradientn(colours=rev(blue_pal),limits=M_time,guide='colorbar')+#
			theme_bw()+ theme(text=element_text(family="Helvetica", size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position='none')+#
			scale_y_continuous(expand = c(0,0),breaks=seq(000,3000,by=500),labels=c(250,seq(500,2500,by=500),'All')) + scale_x_continuous(expand = c(0,0),breaks=seq(0,1,by=0.25),limits=c(0.45,1.05))+#
			ylab('Memory window, w') + xlab('Cost of errors, c')#
	}#
}#
#
time_fake = data.frame(z =seq(M_time[1],M_time[2],length.out = 22), x = 1:22,y = 1:22)#
#
time_legend = ggplot(time_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(blue_pal),limits=M_time,breaks = squish(c(500,1000,2000,4000,16000)),labels=c(500,1000,2000,4000,16000))+labs(fill=expression(paste('Time, ',tau,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
time_legend = get_legend(time_legend)#
#
graphics.off()#
width = 6.85#
height= 4#
#
pdf('/Users/eleanorbrush/Desktop/time_heat_maps_rule.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize)#
#
grid.arrange(blank,contour_time[[4]],contour_time[[5]],contour_time[[6]],time_legend,blank,contour_time[[7]],contour_time[[8]],contour_time[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))#
#
dev.off()#
#
M_error = c(0,0.29)#
#
contour_error = list()#
#
for(i in 1:3){#
	for(j in 1:3){#
		I = sub2ind(c(xN_cat,xrho_cat),c(i,j))#
		f_cat_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_cat)#
		f_rule_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_rule)#
		error_df = data.frame(w=optimal_cognition_rule$w[f_rule_now],c=optimal_cognition_rule$c[f_rule_now],error=optimal_cognition_rule$error[f_rule_now])		#
		contour_error[[I]] = ggplot(error_df,aes(x=c,y=w,z=error)) +#
			geom_tile(aes(fill=error))+#
			scale_fill_gradientn(colours=rev(red_pal),limits=M_error,guide='colorbar')+#
			theme_bw()+ theme(text=element_text(family="Helvetica", size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position='none')+#
			scale_y_continuous(expand = c(0,0),breaks=seq(000,3000,by=500),labels=c(250,seq(500,2500,by=500),'All')) + scale_x_continuous(expand = c(0,0),breaks=seq(0,1,by=0.25),limits=c(0.45,1.05))+#
			ylab('Memory window, w') + xlab('Cost of errors, c')#
	}#
}#
#
error_fake = data.frame(z =seq(M_error[1],M_error[2],length.out = 22), x = 1:22,y = 1:22)#
#
error_legend = ggplot(error_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(red_pal),limits=M_error,breaks = seq(round(M_error[1],1),round(M_error[2],1),by=0.1), labels = seq(round(M_error[1],1),round(M_error[2],1),by=0.1))+labs(fill=expression(paste('Error, ',epsilon,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
error_legend = get_legend(error_legend)#
#
graphics.off()#
#
width = 6.85#
height= 4#
#
pdf('/Users/eleanorbrush/Desktop/error_heat_maps_rule.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize)#
#
grid.arrange(blank,contour_error[[4]],contour_error[[5]],contour_error[[6]],error_legend,blank,contour_error[[7]],contour_error[[8]],contour_error[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))#
#
dev.off()
M_error = c(0,0.29)#
#
contour_error = list()#
#
for(i in 1:3){#
	for(j in 1:3){#
		I = sub2ind(c(xN_cat,xrho_cat),c(i,j))#
		f_cat_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_cat)#
		f_rule_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_rule)#
		error_df = data.frame(w=optimal_cognition_cat$w[f_cat_now],c=optimal_cognition_cat$c[f_cat_now],error=optimal_cognition_cat$error[f_cat_now])		#
		contour_error[[I]] = ggplot(error_df,aes(x=c,y=w,z=error)) +#
			geom_tile(aes(fill=error))+#
			scale_fill_gradientn(colours=rev(red_pal),limits=M_error,guide='colorbar')+#
			theme_bw()+ theme(text=element_text(family="Helvetica", size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position='none')+#
			scale_y_continuous(expand = c(0,0),breaks=seq(000,3000,by=500),labels=c(250,seq(500,2500,by=500),'All')) + scale_x_continuous(expand = c(0,0),breaks=seq(0,1,by=0.25),limits=c(0.45,1.05))+#
			ylab('Memory window, w') + xlab('Cost of errors, c')#
	}#
}#
#
error_fake = data.frame(z =seq(M_error[1],M_error[2],length.out = 22), x = 1:22,y = 1:22)#
#
error_legend = ggplot(error_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(red_pal),limits=M_error,breaks = seq(round(M_error[1],1),round(M_error[2],1),by=0.1), labels = seq(round(M_error[1],1),round(M_error[2],1),by=0.1))+labs(fill=expression(paste('Error, ',epsilon,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
error_legend = get_legend(error_legend)#
#
graphics.off()
M_error = c(0,0.30)#
#
contour_error = list()#
#
for(i in 1:3){#
	for(j in 1:3){#
		I = sub2ind(c(xN_cat,xrho_cat),c(i,j))#
		f_cat_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_cat)#
		f_rule_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_rule)#
		error_df = data.frame(w=optimal_cognition_rule$w[f_rule_now],c=optimal_cognition_rule$c[f_rule_now],error=optimal_cognition_rule$error[f_rule_now])		#
		contour_error[[I]] = ggplot(error_df,aes(x=c,y=w,z=error)) +#
			geom_tile(aes(fill=error))+#
			scale_fill_gradientn(colours=rev(red_pal),limits=M_error,guide='colorbar')+#
			theme_bw()+ theme(text=element_text(family="Helvetica", size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position='none')+#
			scale_y_continuous(expand = c(0,0),breaks=seq(000,3000,by=500),labels=c(250,seq(500,2500,by=500),'All')) + scale_x_continuous(expand = c(0,0),breaks=seq(0,1,by=0.25),limits=c(0.45,1.05))+#
			ylab('Memory window, w') + xlab('Cost of errors, c')#
	}#
}#
#
error_fake = data.frame(z =seq(M_error[1],M_error[2],length.out = 22), x = 1:22,y = 1:22)#
#
error_legend = ggplot(error_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(red_pal),limits=M_error,breaks = seq(round(M_error[1],1),round(M_error[2],1),by=0.1), labels = seq(round(M_error[1],1),round(M_error[2],1),by=0.1))+labs(fill=expression(paste('Error, ',epsilon,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
error_legend = get_legend(error_legend)#
#
graphics.off()#
#
width = 6.85#
height= 4#
#
pdf('/Users/eleanorbrush/Desktop/error_heat_maps_rule.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize)#
#
grid.arrange(blank,contour_error[[4]],contour_error[[5]],contour_error[[6]],error_legend,blank,contour_error[[7]],contour_error[[8]],contour_error[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))#
#
dev.off()
M_error = c(0,0.30)#
#
contour_error = list()#
#
for(i in 1:3){#
	for(j in 1:3){#
		I = sub2ind(c(xN_cat,xrho_cat),c(i,j))#
		f_cat_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_cat)#
		f_rule_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_rule)#
		error_df = data.frame(w=optimal_cognition_cat$w[f_cat_now],c=optimal_cognition_cat$c[f_cat_now],error=optimal_cognition_cat$error[f_cat_now])		#
		contour_error[[I]] = ggplot(error_df,aes(x=c,y=w,z=error)) +#
			geom_tile(aes(fill=error))+#
			scale_fill_gradientn(colours=rev(red_pal),limits=M_error,guide='colorbar')+#
			theme_bw()+ theme(text=element_text(family="Helvetica", size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position='none')+#
			scale_y_continuous(expand = c(0,0),breaks=seq(000,3000,by=500),labels=c(250,seq(500,2500,by=500),'All')) + scale_x_continuous(expand = c(0,0),breaks=seq(0,1,by=0.25),limits=c(0.45,1.05))+#
			ylab('Memory window, w') + xlab('Cost of errors, c')#
	}#
}#
#
error_fake = data.frame(z =seq(M_error[1],M_error[2],length.out = 22), x = 1:22,y = 1:22)#
#
error_legend = ggplot(error_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(red_pal),limits=M_error,breaks = seq(round(M_error[1],1),round(M_error[2],1),by=0.1), labels = seq(round(M_error[1],1),round(M_error[2],1),by=0.1))+labs(fill=expression(paste('Error, ',epsilon,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
error_legend = get_legend(error_legend)#
#
graphics.off()
width = 6.85#
height= 6#
#
pdf('/Users/eleanorbrush/Desktop/error_heat_maps_rule.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize)#
#
grid.arrange(blank,contour_error[[1]],contour_error[[2]],contour_error[[3]],error_legend,blank,contour_error[[4]],contour_error[[5]],contour_error[[6]],blank,blank,contour_error[[7]],contour_error[[8]],contour_error[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))#
#
dev.off()
M_error = c(0,0.30)#
#
contour_error = list()#
#
for(i in 1:3){#
	for(j in 1:3){#
		I = sub2ind(c(xN_cat,xrho_cat),c(i,j))#
		f_cat_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_cat)#
		f_rule_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_rule)#
		error_df = data.frame(w=optimal_cognition_rule$w[f_rule_now],c=optimal_cognition_rule$c[f_rule_now],error=optimal_cognition_rule$error[f_rule_now])		#
		contour_error[[I]] = ggplot(error_df,aes(x=c,y=w,z=error)) +#
			geom_tile(aes(fill=error))+#
			scale_fill_gradientn(colours=rev(red_pal),limits=M_error,guide='colorbar')+#
			theme_bw()+ theme(text=element_text(family="Helvetica", size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position='none')+#
			scale_y_continuous(expand = c(0,0),breaks=seq(000,3000,by=500),labels=c(250,seq(500,2500,by=500),'All')) + scale_x_continuous(expand = c(0,0),breaks=seq(0,1,by=0.25),limits=c(0.45,1.05))+#
			ylab('Memory window, w') + xlab('Cost of errors, c')#
	}#
}#
#
error_fake = data.frame(z =seq(M_error[1],M_error[2],length.out = 22), x = 1:22,y = 1:22)#
#
error_legend = ggplot(error_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(red_pal),limits=M_error,breaks = seq(round(M_error[1],1),round(M_error[2],1),by=0.1), labels = seq(round(M_error[1],1),round(M_error[2],1),by=0.1))+labs(fill=expression(paste('Error, ',epsilon,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
error_legend = get_legend(error_legend)#
#
graphics.off()#
#
width = 6.85#
height= 6#
#
pdf('/Users/eleanorbrush/Desktop/error_heat_maps_rule.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize)#
#
grid.arrange(blank,contour_error[[1]],contour_error[[2]],contour_error[[3]],error_legend,blank,contour_error[[4]],contour_error[[5]],contour_error[[6]],blank,blank,contour_error[[7]],contour_error[[8]],contour_error[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))#
#
dev.off()
M_error = c(0,0.50)#
#
contour_error = list()#
#
for(i in 1:3){#
	for(j in 1:3){#
		I = sub2ind(c(xN_cat,xrho_cat),c(i,j))#
		f_cat_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_cat)#
		f_rule_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_rule)#
		error_df = data.frame(w=optimal_cognition_rule$w[f_rule_now],c=optimal_cognition_rule$c[f_rule_now],error=optimal_cognition_rule$error[f_rule_now])		#
		contour_error[[I]] = ggplot(error_df,aes(x=c,y=w,z=error)) +#
			geom_tile(aes(fill=error))+#
			scale_fill_gradientn(colours=rev(red_pal),limits=M_error,guide='colorbar')+#
			theme_bw()+ theme(text=element_text(family="Helvetica", size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position='none')+#
			scale_y_continuous(expand = c(0,0),breaks=seq(000,3000,by=500),labels=c(250,seq(500,2500,by=500),'All')) + scale_x_continuous(expand = c(0,0),breaks=seq(0,1,by=0.25),limits=c(0.45,1.05))+#
			ylab('Memory window, w') + xlab('Cost of errors, c')#
	}#
}#
#
error_fake = data.frame(z =seq(M_error[1],M_error[2],length.out = 22), x = 1:22,y = 1:22)#
#
error_legend = ggplot(error_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(red_pal),limits=M_error,breaks = seq(round(M_error[1],1),round(M_error[2],1),by=0.1), labels = seq(round(M_error[1],1),round(M_error[2],1),by=0.1))+labs(fill=expression(paste('Error, ',epsilon,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
error_legend = get_legend(error_legend)#
#
graphics.off()#
#
width = 6.85#
height= 6#
#
pdf('/Users/eleanorbrush/Desktop/error_heat_maps_rule.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize)#
#
grid.arrange(blank,contour_error[[1]],contour_error[[2]],contour_error[[3]],error_legend,blank,contour_error[[4]],contour_error[[5]],contour_error[[6]],blank,blank,contour_error[[7]],contour_error[[8]],contour_error[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))#
#
dev.off()
pdf('/Users/eleanorbrush/Desktop/error_heat_maps_rule.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize)#
#
grid.arrange(blank,contour_error[[4]],contour_error[[5]],contour_error[[6]],error_legend,blank,contour_error[[7]],contour_error[[8]],contour_error[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))
dev.off()
width = 6.85#
height= 4#
#
pdf('/Users/eleanorbrush/Desktop/error_heat_maps_rule.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize)#
#
grid.arrange(blank,contour_error[[4]],contour_error[[5]],contour_error[[6]],error_legend,blank,contour_error[[7]],contour_error[[8]],contour_error[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))#
#
dev.off()
find(N=100,w=1000,p=parameters_rule)
error_ruel[c(9,27,45),]
error_rule[c(9,27,45),]
str(optimized_rule)
optimized_rule[c(9,27,45),]
find(N=100,w=1000,c=1,p=optimal_cognition_rule)
optimal_cognition_rule[c(360,367,374),]
### learned rule heat maps#
M_time = squish(time[c(10,601)])#
#
contour_time = list()#
#
for(i in 1:3){#
	for(j in 1:3){#
		I = sub2ind(c(xN_cat,xrho_cat),c(i,j))#
		f_cat_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_cat)#
		f_rule_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_rule)#
		time_df = data.frame(w=optimal_cognition_rule$w[f_rule_now],c=optimal_cognition_rule$c[f_rule_now],time=squish(time[optimal_cognition_rule$time[f_rule_now]]))		#
		contour_time[[I]] = ggplot(time_df,aes(x=c,y=w,z=time)) +#
			geom_tile(aes(fill=time))+#
			scale_fill_gradientn(colours=rev(blue_pal),limits=M_time,guide='colorbar')+#
			theme_bw()+ theme(text=element_text(family="Helvetica", size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position='none')+#
			scale_y_continuous(expand = c(0,0),breaks=seq(000,3000,by=500),labels=c(250,seq(500,2500,by=500),'All')) + scale_x_continuous(expand = c(0,0),breaks=seq(0,1,by=0.25),limits=c(0.45,1.05))+#
			ylab('Memory window, w') + xlab('Cost of errors, c')#
	}#
}#
#
time_fake = data.frame(z =seq(M_time[1],M_time[2],length.out = 22), x = 1:22,y = 1:22)#
#
time_legend = ggplot(time_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(blue_pal),limits=M_time,breaks = squish(c(500,1000,2000,4000,16000)),labels=c(500,1000,2000,4000,16000))+labs(fill=expression(paste('Time, ',tau,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
time_legend = get_legend(time_legend)#
#
graphics.off()#
width = 6.85#
height= 4#
#
pdf('/Users/eleanorbrush/Desktop/time_heat_maps_rule.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize)#
#
grid.arrange(blank,contour_time[[4]],contour_time[[5]],contour_time[[6]],time_legend,blank,contour_time[[7]],contour_time[[8]],contour_time[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))#
#
dev.off()#
#
M_error = c(0,0.30)#
#
contour_error = list()#
#
for(i in 1:3){#
	for(j in 1:3){#
		I = sub2ind(c(xN_cat,xrho_cat),c(i,j))#
		f_cat_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_cat)#
		f_rule_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_rule)#
		error_df = data.frame(w=optimal_cognition_rule$w[f_rule_now],c=optimal_cognition_rule$c[f_rule_now],error=optimal_cognition_rule$error[f_rule_now])		#
		contour_error[[I]] = ggplot(error_df,aes(x=c,y=w,z=error)) +#
			geom_tile(aes(fill=error))+#
			scale_fill_gradientn(colours=rev(red_pal),limits=M_error,guide='colorbar')+#
			theme_bw()+ theme(text=element_text(family="Helvetica", size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position='none')+#
			scale_y_continuous(expand = c(0,0),breaks=seq(000,3000,by=500),labels=c(250,seq(500,2500,by=500),'All')) + scale_x_continuous(expand = c(0,0),breaks=seq(0,1,by=0.25),limits=c(0.45,1.05))+#
			ylab('Memory window, w') + xlab('Cost of errors, c')#
	}#
}#
#
error_fake = data.frame(z =seq(M_error[1],M_error[2],length.out = 22), x = 1:22,y = 1:22)#
#
error_legend = ggplot(error_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(red_pal),limits=M_error,breaks = seq(round(M_error[1],1),round(M_error[2],1),by=0.1), labels = seq(round(M_error[1],1),round(M_error[2],1),by=0.1))+labs(fill=expression(paste('Error, ',epsilon,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
error_legend = get_legend(error_legend)#
#
graphics.off()#
#
width = 6.85#
height= 4#
#
pdf('/Users/eleanorbrush/Desktop/error_heat_maps_rule.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize)#
#
grid.arrange(blank,contour_error[[4]],contour_error[[5]],contour_error[[6]],error_legend,blank,contour_error[[7]],contour_error[[8]],contour_error[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))#
#
dev.off()
time_legend = ggplot(time_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(blue_pal),limits=M_time,breaks = squish(c(1000,4000,16000)),labels=c(1000,4000,16000))+labs(fill=expression(paste('Time, ',tau,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
time_legend = get_legend(time_legend)#
#
graphics.off()#
width = 6.85#
height= 4#
#
pdf('/Users/eleanorbrush/Desktop/time_heat_maps_rule.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize)#
#
grid.arrange(blank,contour_time[[4]],contour_time[[5]],contour_time[[6]],time_legend,blank,contour_time[[7]],contour_time[[8]],contour_time[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))#
#
dev.off()
M_error = c(0,0.30)#
#
contour_error = list()#
#
for(i in 1:3){#
	for(j in 1:3){#
		I = sub2ind(c(xN_cat,xrho_cat),c(i,j))#
		f_cat_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_cat)#
		f_rule_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_rule)#
		error_df = data.frame(w=optimal_cognition_cat$w[f_cat_now],c=optimal_cognition_cat$c[f_cat_now],error=optimal_cognition_cat$error[f_cat_now])		#
		contour_error[[I]] = ggplot(error_df,aes(x=c,y=w,z=error)) +#
			geom_tile(aes(fill=error))+#
			scale_fill_gradientn(colours=rev(red_pal),limits=M_error,guide='colorbar')+#
			theme_bw()+ theme(text=element_text(family="Helvetica", size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position='none')+#
			scale_y_continuous(expand = c(0,0),breaks=seq(000,3000,by=500),labels=c(250,seq(500,2500,by=500),'All')) + scale_x_continuous(expand = c(0,0),breaks=seq(0,1,by=0.25),limits=c(0.45,1.05))+#
			ylab('Memory window, w') + xlab('Cost of errors, c')#
	}#
}#
#
error_fake = data.frame(z =seq(M_error[1],M_error[2],length.out = 22), x = 1:22,y = 1:22)#
#
error_legend = ggplot(error_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(red_pal),limits=M_error,breaks = seq(round(M_error[1],1),round(M_error[2],1),by=0.1), labels = seq(round(M_error[1],1),round(M_error[2],1),by=0.1))+labs(fill=expression(paste('Error, ',epsilon,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.title=element_text(size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
error_legend = get_legend(error_legend)#
#
graphics.off()#
#
M_time = squish(time[c(10,601)])#
#
contour_time = list()#
#
for(i in 1:3){#
	for(j in 1:3){#
		I = sub2ind(c(xN_cat,xrho_cat),c(i,j))#
		f_cat_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_cat)#
		f_rule_now = find(N=unique(examples_optimized$N)[i],rho=unique(examples_optimized$rho)[j],p=optimal_cognition_rule)#
		time_df = data.frame(w=optimal_cognition_cat$w[f_cat_now],c=optimal_cognition_cat$c[f_cat_now],time=squish(time[optimal_cognition_cat$time[f_cat_now]]))		#
		contour_time[[I]] = ggplot(time_df,aes(x=c,y=w,z=time)) +#
			geom_tile(aes(fill=time))+#
			scale_fill_gradientn(colours=rev(blue_pal),limits=M_time,guide='colorbar')+#
			theme_bw()+ theme(text=element_text(family="Helvetica", size=smallfontsize), plot.margin=unit(marg,"cm"), legend.key =element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position='none')+#
			scale_y_continuous(expand = c(0,0),breaks=seq(000,3000,by=500),labels=c(250,seq(500,2500,by=500),'All')) + scale_x_continuous(expand = c(0,0),breaks=seq(0,1,by=0.25),limits=c(0.45,1.05))+#
			ylab('Memory window, w') + xlab('Cost of errors, c')#
	}#
}#
#
time_fake = data.frame(z =seq(M_time[1],M_time[2],length.out = 22), x = 1:22,y = 1:22)#
#
time_legend = ggplot(time_fake,aes(x=x,y=y,z=z)) + geom_tile(aes(fill=z)) + scale_fill_gradientn(colours=rev(blue_pal),limits=M_time,breaks = squish(c(1000,4000,16000)),labels=c(1000,4000,16000))+labs(fill=expression(paste('Time, ',tau,sep='')))+theme(text=element_text(family="Helvetica", size=smallfontsize), plot.margin=unit(marg,"cm"),legend.key =element_blank(),legend.text=element_text(size=smallfontsize))#
#
time_legend = get_legend(time_legend)#
#
graphics.off()
pdf('/Users/eleanorbrush/Desktop/error_heat_maps.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize)#
#
grid.arrange(blank,contour_error[[1]],contour_error[[2]],contour_error[[3]],error_legend,blank,contour_error[[4]],contour_error[[5]],contour_error[[6]],blank,blank,contour_error[[7]],contour_error[[8]],contour_error[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))#
#
dev.off()#
#
width = 6.85#
height= 4
width = 6.85#
height= 6#
#
pdf('/Users/eleanorbrush/Desktop/error_heat_maps.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize)#
#
grid.arrange(blank,contour_error[[1]],contour_error[[2]],contour_error[[3]],error_legend,blank,contour_error[[4]],contour_error[[5]],contour_error[[6]],blank,blank,contour_error[[7]],contour_error[[8]],contour_error[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))#
#
dev.off()#
#
width = 6.85#
height= 4
width = 6.85#
height= 6#
#
pdf('/Users/eleanorbrush/Desktop/error_heat_maps.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize)#
#
grid.arrange(blank,contour_error[[1]],contour_error[[2]],contour_error[[3]],error_legend,blank,contour_error[[4]],contour_error[[5]],contour_error[[6]],blank,blank,contour_error[[7]],contour_error[[8]],contour_error[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.18))#
#
dev.off()
width = 6.85#
height= 6#
#
pdf('/Users/eleanorbrush/Desktop/error_heat_maps.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize)#
#
grid.arrange(blank,contour_error[[1]],contour_error[[2]],contour_error[[3]],error_legend,blank,contour_error[[4]],contour_error[[5]],contour_error[[6]],blank,blank,contour_error[[7]],contour_error[[8]],contour_error[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.17))#
#
dev.off()
width = 6.85#
height= 6#
#
pdf('/Users/eleanorbrush/Desktop/error_heat_maps.pdf',width=width,height=height,family=fontfamily)#
#
par(ps=smallfontsize)#
#
grid.arrange(blank,contour_error[[1]],contour_error[[2]],contour_error[[3]],error_legend,blank,contour_error[[4]],contour_error[[5]],contour_error[[6]],blank,blank,contour_error[[7]],contour_error[[8]],contour_error[[9]],ncol=5,widths=c(0.05,0.4,0.4,0.4,0.19))#
#
dev.off()
